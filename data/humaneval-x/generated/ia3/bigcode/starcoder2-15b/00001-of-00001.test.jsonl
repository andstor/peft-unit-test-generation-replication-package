{"id": "Java/0", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n    >>> hasCloseElements(Arrays.asList(1.0, 2.0, 3.0), 0.5)\n    false\n    >>> hasCloseElements(Arrays.asList(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n    true\n     */\n    public boolean hasCloseElements(List<Double> numbers, double threshold) {\n", "reference": "        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                double distance = Math.abs(numbers.get(i) - numbers.get(j));\n                if (distance < threshold) return true;\n            }\n        }\n        return false;\n    }\n}", "prediction": "\t// TODO: implement this method\n        return false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/1", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separateParenGroups(\"( ) (( )) (( )( ))\")\n    [\"()\", \"(())\", \"(()())\"]\n     */\n    public List<String> separateParenGroups(String paren_string) {\n", "reference": "        List<String> result = new ArrayList<>();\n        StringBuilder current_string = new StringBuilder();\n        int current_depth = 0;\n\n        for (char c : paren_string.toCharArray()) {\n            if (c == '(') {\n                current_depth += 1;\n                current_string.append(c);\n            } else if (c == ')') {\n                current_depth -= 1;\n                current_string.append(c);\n\n                if (current_depth == 0) {\n                    result.add(current_string.toString());\n                    current_string.setLength(0);\n                }\n            }\n        }\n        return result;\n\n    }\n}", "prediction": "\tList<String> result = new ArrayList<String>();\n\tStack<Character> stack = new Stack<Character>();\n\tint start = 0;\n\tfor (int i = 0; i < paren_string.length(); i++) {\n\t    char c = paren_string.charAt(i);\n\t    if (c == '(') {\n\t\tstack.push(c);\n\t    } else if (c == ')') {\n\t\tif (stack.isEmpty()) {\n\t\t    continue;\n\t\t}\n\t\tstack.pop();\n\t\tif (stack.isEmpty()) {\n\t\t    result.add(paren_string.substring(start, i + 1));\n\t\t    start = i + 1;\n\t\t}\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/2", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncateNumber(3.5)\n    0.5\n     */\n    public double truncateNumber(double number) {\n", "reference": "        return number % 1.0;\n    }\n}", "prediction": "\treturn number - Math.floor(number);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/3", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> belowZero(Arrays.asList(1, 2, 3))\n    false\n    >>> belowZero(Arrays.asList(1, 2, -4, 5))\n    true\n     */\n    public boolean belowZero(List<Integer> operations) {\n", "reference": "        int balance = 0;\n\n        for (int op : operations) {\n            balance += op;\n            if (balance < 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}", "prediction": "\tint balance = 0;\n\tfor (int i = 0; i < operations.size(); i++) {\n\t    balance += operations.get(i);\n\t    if (balance < 0) {\n\t\treturn true;\n\t    }\n\t}\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/4", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation(Arrays.asList(1.0, 2.0, 3.0, 4.0))\n    1.0\n     */\n    public double meanAbsoluteDeviation(List<Double> numbers) {\n", "reference": "        double sum = 0.0;\n        for (double num : numbers) {\n            sum += num;\n        }\n        double mean = sum / numbers.size();\n        double sum_abs_diff = 0.0;\n        for (double num : numbers) {\n            sum_abs_diff += Math.abs(num - mean);\n        }\n        return sum_abs_diff / numbers.size();\n    }\n}", "prediction": "\tdouble sum = 0;\n\tfor (double num : numbers) {\n\t    sum += num;\n\t}\n\tdouble mean = sum / numbers.size();\n\tdouble sumOfDiffs = 0;\n\tfor (double num : numbers) {\n\t    sumOfDiffs += Math.abs(num - mean);\n\t}\n\treturn sumOfDiffs / numbers.size();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/5", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse(List.of(), 4)\n    []\n    >>> intersperse(Arrays.asList(1, 2, 3), 4)\n    [1, 4, 2, 4, 3]\n     */\n    public List<Integer> intersperse(List<Integer> numbers, int delimiter) {\n", "reference": "        if (numbers.size() == 0) {\n            return List.of();\n        }\n        List<Integer> result = new ArrayList<>(List.of());\n        for (int i = 0; i < numbers.size() - 1; i++) {\n            result.add(numbers.get(i));\n            result.add(delimiter);\n        }\n\n        result.add(numbers.get(numbers.size() - 1));\n\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<>();\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t    result.add(numbers.get(i));\n\t    if (i!= numbers.size() - 1) {\n\t\tresult.add(delimiter);\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/6", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     */\n    public List<Integer> parseNestedParens(String paren_string) {\n", "reference": "        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tString[] groups = paren_string.split(\" \");\n\tfor (String group : groups) {\n\t    result.add(parseNestedParens(group, 0));\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/7", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that contain given substring\n    >>> filterBySubstring(List.of(), \"a\")\n    []\n    >>> filterBySubstring(Arrays.asList(\"abc\", \"bacd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n     */\n    public List<String> filterBySubstring(List<String> strings, String substring) {\n", "reference": "        List<String> result = new ArrayList<>();\n        for (String x : strings) {\n            if (x.contains(substring)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}", "prediction": "\treturn strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/8", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sumProduct(List.of())\n    [0, 1]\n    >>> sumProduct(Arrays.asList(1, 2, 3, 4))\n    [10, 24]\n     */\n    public List<Integer> sumProduct(List<Integer> numbers) {\n", "reference": "        int sum = 0;\n        int product = 1;\n\n        for (int n : numbers) {\n            sum += n;\n            product *= n;\n        }\n        return Arrays.asList(sum, product);\n    }\n}", "prediction": "//        int sum = 0;\n//        int product = 1;\n//        for (int i = 0; i < numbers.size(); i++) {\n//            sum += numbers.get(i);\n//            product *= numbers.get(i);\n//        }\n//        return Arrays.asList(sum, product);\n        return numbers.stream().reduce(Arrays.asList(0, 1), (acc, n) -> Arrays.asList(acc.get(0) + n, acc.get(1) * n), (acc1, acc2) -> Arrays.asList(acc1.get(0) + acc2.get(0), acc1.get(1) * acc2.get(1)));\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/9", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rollingMax(Arrays.asList(1, 2, 3, 2, 3, 4, 2))\n    [1, 2, 3, 3, 3, 4, 4]\n     */\n    public List<Integer> rollingMax(List<Integer> numbers) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        if (numbers.size() == 0) {\n            return result;\n        }\n        int rollingMax = numbers.get(0);\n        result.add(rollingMax);\n\n        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i) > rollingMax) {\n                rollingMax = numbers.get(i);\n            }\n            result.add(rollingMax);\n        }\n\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tint max = 0;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t    if (numbers.get(i) > max) {\n\t\tmax = numbers.get(i);\n\t    }\n\t    result.add(max);\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/10", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Test if given string is a palindrome\n     */\n    public boolean isPalindrome(String string) {\n        int i = 0;\n        int j = string.length() - 1;\n        while (i < j) {\n            if (string.charAt(i)!= string.charAt(j)) {\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n    /**\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> makePalindrome(\"\")\n    \"\"\n    >>> makePalindrome(\"cat\")\n    \"catac\"\n    >>> makePalindrome(\"cata\")\n    \"catac\"\n     */\n    public String makePalindrome(String string) {\n", "reference": "        if (string.length() == 0) {\n            return \"\";\n        }\n\n        int beginning_of_suffix = 0;\n\n        while (!isPalindrome(string.substring(beginning_of_suffix))) {\n            beginning_of_suffix++;\n        }\n\n        return string + new StringBuffer(string.substring(0, beginning_of_suffix)).reverse().toString();\n    }\n}", "prediction": "\tif (string.length() == 0) {\n\t    return \"\";\n\t}\n\tint i = 0;\n\tint j = string.length() - 1;\n\twhile (i < j) {\n\t    if (string.charAt(i) == string.charAt(j)) {\n\t\ti++;\n\t\tj--;\n\t    } else {\n\t\tbreak;\n\t    }\n\t}\n\tif (i >= j) {\n\t    return string;\n\t}\n\tString prefix = string.substring(0, i);\n\tString suffix = string.substring(i, string.length());\n\tString reversedPrefix = new StringBuilder(prefix).reverse().toString();\n\treturn string + reversedPrefix;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/11", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     */\n    public String stringXor(String a, String b) {\n", "reference": "        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}", "prediction": "\t// Write your code here\n        String result = \"\";\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result += \"0\";\n            } else {\n                result += \"1\";\n            }\n        }\n        return result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/12", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     */\n    public Optional<String> longest(List<String> strings) {\n", "reference": "        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}", "prediction": "\tif (strings.isEmpty()) {\n\t    return Optional.empty();\n\t}\n\tString longest = strings.get(0);\n\tfor (String s : strings) {\n\t    if (s.length() > longest.length()) {\n\t\tlongest = s;\n\t    }\n\t}\n\treturn Optional.of(longest);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/13", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a greatest common divisor of two integers a and b\n    >>> greatestCommonDivisor(3, 5)\n    1\n    >>> greatestCommonDivisor(25, 15)\n    5\n     */\n    public int greatestCommonDivisor(int a, int b) {\n", "reference": "        if (a == 0 || b == 0) {\n            return a + b;\n        }\n        if (a == b) {\n            return a;\n        }\n        if (a > b) {\n            return greatestCommonDivisor(a % b, b);\n        } else {\n            return greatestCommonDivisor(a, b % a);\n        }\n    }\n}", "prediction": "\tif (a == 0) {\n\t    return b;\n\t}\n\treturn greatestCommonDivisor(b % a, a);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/14", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n     */\n    public List<String> allPrefixes(String string) {\n", "reference": "        List<String> result = new ArrayList<>();\n\n        for (int i = 1; i <= string.length(); i++) {\n            result.add(string.substring(0, i));\n        }\n        return result;\n    }\n}", "prediction": "\tList<String> prefixes = new ArrayList<String>();\n\tfor (int i = 1; i <= string.length(); i++) {\n\t    prefixes.add(string.substring(0, i));\n\t}\n\treturn prefixes;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/15", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> stringSequence(0)\n    \"0\"\n    >>> stringSequence(5)\n    \"0 1 2 3 4 5\"\n     */\n    public String stringSequence(int n) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            sb.append(i);\n            sb.append(\" \");\n        }\n        sb.append(n);\n        return sb.toString();\n    }\n}", "prediction": "\tString result = \"\";\n\tfor (int i = 0; i <= n; i++) {\n\t    result += i + \" \";\n\t}\n\treturn result.trim();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/16", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> countDistinctCharacters(\"xyzXYZ\")\n    3\n    >>> countDistinctCharacters(\"Jerry\")\n    4\n     */\n    public int countDistinctCharacters(String string) {\n", "reference": "        Set<Character> set = new HashSet<>();\n        for (char c : string.toLowerCase().toCharArray()) {\n            set.add(c);\n        }\n        return set.size();\n    }\n}", "prediction": "\t// TODO: Implement this method\n\treturn 0;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/17", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o|.| o| o|.|.|.|.| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     */\n    public List<Integer> parseMusic(String string) {\n", "reference": "        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tint i = 0;\n\twhile (i < string.length()) {\n\t    if (string.charAt(i) == 'o') {\n\t\tif (i + 1 < string.length() && string.charAt(i + 1) == '|') {\n\t\t    result.add(2);\n\t\t    i += 2;\n\t\t} else {\n\t\t    result.add(4);\n\t\t    i++;\n\t\t}\n\t    } else if (string.charAt(i) == '.') {\n\t\tresult.add(1);\n\t\ti += 2;\n\t    } else {\n\t\ti++;\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/18", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     */\n    public int howManyTimes(String string, String substring) {\n", "reference": "        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}", "prediction": "\tint count = 0;\n\tint index = 0;\n\twhile (index!= -1) {\n\t    index = string.indexOf(substring, index);\n\t    if (index!= -1) {\n\t\tcount++;\n\t\tindex++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/19", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sortNumbers(\"three one five\")\n    \"one three five\"\n     */\n    public String sortNumbers(String numbers) {\n", "reference": "        String[] nums = numbers.split(\" \");\n        List<Integer> num = new ArrayList<>();\n        for (String string : nums) {\n            switch (string) {\n                case \"zero\" -> num.add(0);\n                case \"one\" -> num.add(1);\n                case \"two\" -> num.add(2);\n                case \"three\" -> num.add(3);\n                case \"four\" -> num.add(4);\n                case \"five\" -> num.add(5);\n                case \"six\" -> num.add(6);\n                case \"seven\" -> num.add(7);\n                case \"eight\" -> num.add(8);\n                case \"nine\" -> num.add(9);\n            }\n        }\n        Collections.sort(num);\n        List<String> result = new ArrayList<>();\n        for (int m : num) {\n            switch (m) {\n                case 0 -> result.add(\"zero\");\n                case 1 -> result.add(\"one\");\n                case 2 -> result.add(\"two\");\n                case 3 -> result.add(\"three\");\n                case 4 -> result.add(\"four\");\n                case 5 -> result.add(\"five\");\n                case 6 -> result.add(\"six\");\n                case 7 -> result.add(\"seven\");\n                case 8 -> result.add(\"eight\");\n                case 9 -> result.add(\"nine\");\n            }\n        }\n        return String.join(\" \", result);\n    }\n}", "prediction": "\tString[] numArray = numbers.split(\" \");\n\tint[] numArrayInt = new int[numArray.length];\n\tfor (int i = 0; i < numArray.length; i++) {\n\t    numArrayInt[i] = Integer.parseInt(numArray[i]);\n\t}\n\tArrays.sort(numArrayInt);\n\tString result = \"\";\n\tfor (int i = 0; i < numArrayInt.length; i++) {\n\t    result += numArrayInt[i] + \" \";\n\t}\n\treturn result.trim();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/20", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n    [2.0, 2.2]\n    >>> findClosestElements(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n    [2.0, 2.0]\n     */\n    public List<Double> findClosestElements(List<Double> numbers) {\n", "reference": "        List<Double> closest_pair = new ArrayList<>();\n        closest_pair.add(numbers.get(0));\n        closest_pair.add(numbers.get(1));\n        double distance = Math.abs(numbers.get(1) - numbers.get(0));\n        for (int i = 0; i < numbers.size(); i++) {\n            for (int j = i + 1; j < numbers.size(); j++) {\n                if (Math.abs(numbers.get(i) - numbers.get(j)) < distance) {\n                    closest_pair.clear();\n                    closest_pair.add(numbers.get(i));\n                    closest_pair.add(numbers.get(j));\n                    distance = Math.abs(numbers.get(i) - numbers.get(j));\n                }\n            }\n        }\n        Collections.sort(closest_pair);\n        return closest_pair;\n    }\n}", "prediction": "\tDouble min = Double.MAX_VALUE;\n\tDouble min1 = Double.MAX_VALUE;\n\tDouble min2 = Double.MAX_VALUE;\n\tfor (int i = 0; i < numbers.size(); i++) {\n\t    for (int j = i + 1; j < numbers.size(); j++) {\n\t\tif (Math.abs(numbers.get(i) - numbers.get(j)) < min) {\n\t\t    min = Math.abs(numbers.get(i) - numbers.get(j));\n\t\t    min1 = numbers.get(i);\n\t\t    min2 = numbers.get(j);\n\t\t}\n\t    }\n\t}\n\tList<Double> result = new ArrayList<Double>();\n\tresult.add(min1);\n\tresult.add(min2);\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/21", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescaleToUnit(Arrays.asList(1.0, 2.0, 3.0, 4.0, 5.0))\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n     */\n    public List<Double> rescaleToUnit(List<Double> numbers) {\n", "reference": "        double min_number = Collections.min(numbers);\n        double max_number = Collections.max(numbers);\n        List<Double> result = new ArrayList<>();\n        for (double x : numbers) {\n            result.add((x - min_number) / (max_number - min_number));\n        }\n        return result;\n    }\n}", "prediction": "\tdouble min = Collections.min(numbers);\n\tdouble max = Collections.max(numbers);\n\tList<Double> result = new ArrayList<Double>();\n\tfor (Double d : numbers) {\n\t    result.add((d - min) / (max - min));\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/22", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     */\n    public List<Integer> filterIntergers(List<Object> values) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<>();\n\tfor (Object value : values) {\n\t    if (value instanceof Integer) {\n\t\tresult.add((Integer) value);\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/23", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     */\n    public int strlen(String string) {\n", "reference": "        return string.length();\n    }\n}", "prediction": "\tint length = 0;\n\tfor (int i = 0; i < string.length(); i++) {\n\t    length++;\n\t}\n\treturn length;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/24", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largestDivisor(15)\n    5\n     */\n    public int largestDivisor(int n) {\n", "reference": "        for (int i = n - 1; i > 0; i--) {\n            if (n % i == 0) {\n                return i;\n            }\n        }\n        return 1;\n    }\n}", "prediction": "\tint largest = 1;\n\tfor (int i = 2; i < n; i++) {\n\t    if (n % i == 0) {\n\t\tlargest = i;\n\t    }\n\t}\n\treturn largest;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/25", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n     */\n    public List<Integer> factorize(int n) {\n", "reference": "        List<Integer> fact = new ArrayList<>();\n        int i = 2;\n        while (n > 1) {\n            if (n % i == 0) {\n                fact.add(i);\n                n /= i;\n            } else {\n                i++;\n            }\n        }\n        return fact;\n    }\n}", "prediction": "\tList<Integer> factors = new ArrayList<Integer>();\n\tint i = 2;\n\twhile (n > 1) {\n\t    if (n % i == 0) {\n\t\tfactors.add(i);\n\t\tn /= i;\n\t    } else {\n\t\ti++;\n\t    }\n\t}\n\treturn factors;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/26", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> removeDuplicates(Array.asList(1, 2, 3, 2, 4))\n    [1, 3, 4]\n     */\n    public List<Integer> removeDuplicates(List<Integer> numbers) {\n", "reference": "        Map<Integer, Integer> c = new HashMap<>();\n        for (int i : numbers) {\n            c.put(i, c.getOrDefault(i, 0) + 1);\n        }\n        return numbers.stream().filter(i -> c.get(i) == 1).collect(Collectors.toList());\n    }\n}", "prediction": "//        return numbers.stream().distinct().collect(Collectors.toList());\n        return numbers.stream().filter(i -> Collections.frequency(numbers, i) == 1).collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/27", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flipCase(\"Hello\")\n    \"hELLO\"\n     */\n    public String flipCase(String string) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n            if (Character.isLowerCase(string.charAt(i))) {\n                sb.append(Character.toUpperCase(string.charAt(i)));\n            } else {\n                sb.append(Character.toLowerCase(string.charAt(i)));\n            }\n        }\n        return sb.toString();\n    }\n}", "prediction": "\tString result = \"\";\n\tfor (int i = 0; i < string.length(); i++) {\n\t    char c = string.charAt(i);\n\t    if (Character.isUpperCase(c)) {\n\t\tresult += Character.toLowerCase(c);\n\t    } else if (Character.isLowerCase(c)) {\n\t\tresult += Character.toUpperCase(c);\n\t    } else {\n\t\tresult += c;\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/28", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     */\n    public String concatenate(List<String> strings) {\n", "reference": "        return String.join(\"\", strings);\n    }\n}", "prediction": "\tString result = \"\";\n\tfor (String s : strings) {\n\t    result += s;\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/29", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Filter an input list of strings only for ones that start with a given prefix.\n    >>> filterByPrefix(List.of(), \"a\")\n    []\n    >>> filterByPrefix(Arrays.asList(\"abc\", \"bcd\", \"cde\", \"array\"), \"a\")\n    [\"abc\", \"array\"]\n     */\n    public List<String> filterByPrefix(List<String> strings, String prefix) {\n", "reference": "        return strings.stream().filter(p -> p.startsWith(prefix)).collect(Collectors.toList());\n    }\n}", "prediction": "//        return strings.stream().filter(s -> s.startsWith(prefix)).collect(Collectors.toList());\n        List<String> result = new ArrayList<>();\n        for (String s : strings) {\n            if (s.startsWith(prefix)) {\n                result.add(s);\n            }\n        }\n        return result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/30", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return only positive numbers in the list.\n    >>> getPositive(Arrays.asList(-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> getPositive(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n     */\n    public List<Integer> getPositive(List<Integer> l) {\n", "reference": "        return l.stream().filter(p -> p > 0).collect(Collectors.toList());\n    }\n}", "prediction": "\treturn l.stream().filter(x -> x > 0).collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/31", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     */\n    public boolean isPrime(int n) {\n", "reference": "        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}", "prediction": "\tif (n == 1) {\n\t    return false;\n\t}\n\tfor (int i = 2; i < n; i++) {\n\t    if (n % i == 0) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/32", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n     */\n    public double poly(List<Double> xs, double x) {\n        double result = 0;\n        for (int i = 0; i < xs.size(); i++) {\n            result += xs.get(i) * Math.pow(x, i);\n        }\n        return result;\n    }\n    \n    /**\n    xs are coefficients of a polynomial.\n    findZero find x such that poly(x) = 0.\n    findZero returns only only zero point, even if there are many.\n    Moreover, findZero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> findZero(Arrays.asList(1, 2)) // f(x) = 1 + 2x\n    -0.5\n    >>> findZero(Arrays.asList(-6, 11, -6, 1)) // (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n     */\n    public double findZero(List<Double> xs) {\n", "reference": "        double begin = -1, end = 1;\n        while (poly(xs, begin) * poly(xs, end) > 0) {\n            begin *= 2;\n            end *= 2;\n        }\n        while (end - begin > 1e-10) {\n            double center = (begin + end) / 2;\n            if (poly(xs, begin) * poly(xs, center) > 0) {\n                begin = center;\n            } else {\n                end = center;\n            }\n        }\n        return begin;\n    }\n}", "prediction": "\t// TODO: implement this method\n        double x = 0;\n        double x1 = 0;\n        double x2 = 0;\n        double x3 = 0;\n        double x4 = 0;\n        double x5 = 0;\n        double x6 = 0;\n        double x7 = 0;\n        double x8 = 0;\n        double x9 = 0;\n        double x10 = 0;\n        double x11 = 0;\n        double x12 = 0;\n        double x13 = 0;\n        double x14 = 0;\n        double x15 = 0;\n        double x16 = 0;\n        double x17 = 0;\n        double x18 = 0;\n        double x19 = 0;\n        double x20 = 0;\n        double x21 = 0;\n        double x22 = 0;\n        double x23 = 0;\n        double x24 = 0;\n        double x25 = 0;\n        double x26 = 0;\n        double x27 = 0;\n        double x28 = 0;\n        double x29 = 0;\n        double x30 = 0;\n        double x31 = 0;\n        double x32 = 0;\n        double x33 = 0;\n        double x34 = 0;\n        double x35 = 0;\n        double x36 = 0;\n        double x37 = 0;\n        double x38 = 0;\n        double x39 = 0;\n        double x40 = 0;\n        double x41 = 0;\n        double x42 = 0;\n        double x43 = 0;\n        double x44 = 0;\n        double x45 = 0;\n        double x46 = 0;\n        double x47 = 0;\n        double x48 = 0;\n        double x49 = 0;\n        double x50 = 0;\n        double x51 = 0;\n        double x52 = 0;\n        double x53 = 0;\n        double x54 = 0;\n        double x55 = 0;\n        double x56 = 0;\n        double x57 = 0;\n        double x58 = 0;\n        double x59 = 0;\n        double x60 = 0;\n        double x61 = 0;\n        double x62 = 0;\n        double x63 = 0;\n        double x64 = 0;\n        double x65 = 0;\n        double x66 = 0;\n        double x67 = 0;\n        double x68 = 0;\n        double x69 = 0;\n        double x70 = 0;\n        double x71 = 0;\n        double x72 = 0;\n        double x73 = 0;\n        double x74 = 0;\n        double x75 = 0;\n        double x76 = 0;\n        double x77 = 0;\n        double x78 = 0;\n        double x79 = 0;\n        double x80 = 0;\n        double x81 = 0;\n        double x82 = 0;\n        double x83 = 0;\n        double x84 = 0;\n        double x85 = 0;\n        double x86 = 0;\n        double x87 = 0;\n        double x88 = 0;\n        double x89 = 0;\n        double x90 = 0;\n        double x91 = 0;\n        double x92 = 0;\n        double x93 = 0;\n        double x94 = 0;\n        double x95 = 0;\n        double x96 = 0;\n        double x97 = 0;\n        double x98 = 0;\n        double x99 = 0;\n        double x100 = 0;\n        double x101 = 0;\n        double x102 = 0;\n        double x103 = 0;\n        double x104 = 0;\n        double x105 = 0;\n        double x106 = 0;\n        double x107 = 0;\n        double x108 = 0;\n        double x109 = 0;\n        double x110 = 0;\n        double x111 = 0;\n        double x112 = 0;\n        double x113 = 0;\n        double x114 = 0;\n        double x115 = 0;\n        double x116 = 0;\n        double x117 = 0;\n        double x118 = 0;\n        double x119 = 0;\n        double x120 = 0;\n        double x121 = 0;\n        double x122 = 0;\n        double x123 = 0;\n        double x124 = 0;\n        double x125 = 0;\n        double x126 = 0;\n        double x127 = 0;\n        double x128 = 0;\n        double x129 = 0;\n        double x130 = 0;\n        double x131 = 0;\n        double x132 = 0;\n        double x133 = 0;\n        double x134 = 0;\n        double x135 = 0;\n        double x136 = 0;\n        double x137 = 0;\n        double x138 = 0;\n        double x139 = 0;\n        double x140 = 0;\n        double x141 = 0;\n        double x142 = 0;\n        double x143 = 0;\n        double x144 = 0;\n        double x145 = 0;\n        double x146 = 0;\n        double x147 = 0;\n        double x148 = 0;\n        double x149 = 0;\n        double x150 = 0;\n        double x151 = 0;\n        double x152 = 0;\n        double x153 = 0;\n        double x154 = 0;\n        double x155 = 0;\n        double x156 = 0;\n        double x157 = 0;\n        double x158 = 0;\n        double x159 = 0;\n        double x160 = 0;\n        double x161 = 0;\n        double x162 = 0;\n        double x163 = 0;\n        double x164 = 0;\n        double x165 = 0;\n        double x166 = 0;\n        double x167 = 0;\n        double x168 = 0;\n        double x169 = 0;\n        double x170 = 0;\n        double x171 = 0;\n        double x172 = 0;\n        double x173 = 0;\n        double x174 = 0;\n        double x175 = 0;\n        double x176 = 0;\n        double x177 = 0;\n        double x178 = 0;\n        double x179 = 0;\n        double x180 = 0;\n        double x181 = 0;\n        double x182 = 0;\n        double x183 = 0;\n        double x1", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/33", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sortThird(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortThird(Arrays.asList(5, 6, 3, 4, 8, 9, 2))\n    [2, 6, 3, 4, 8, 9, 5]\n     */\n    public List<Integer> sortThird(List<Integer> l) {\n", "reference": "        List<Integer> thirds = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 3) {\n            thirds.add(l.get(i));\n        }\n        Collections.sort(thirds);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 3) {\n            result.set(i, thirds.get(i / 3));\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> l2 = new ArrayList<Integer>();\n\tfor (int i = 0; i < l.size(); i++) {\n\t    if (i % 3 == 0) {\n\t\tl2.add(i, l.get(i));\n\t    }\n\t    else {\n\t\tl2.add(i, l.get(i));\n\t    }\n\t}\n\tfor (int i = 0; i < l2.size(); i++) {\n\t    if (i % 3 == 0) {\n\t\tCollections.sort(l2.subList(i, i + 3));\n\t    }\n\t}\n\treturn l2;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/34", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique elements in a list\n    >>> unique(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [0, 2, 3, 5, 9, 123]\n     */\n    public List<Integer> unique(List<Integer> l) {\n", "reference": "        List<Integer> result = new ArrayList<>(new HashSet<>(l));\n        Collections.sort(result);\n        return result;\n    }\n}", "prediction": "\tSet<Integer> set = new HashSet<Integer>(l);\n\tList<Integer> list = new ArrayList<Integer>(set);\n\tCollections.sort(list);\n\treturn list;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/35", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return maximum element in the list.\n    >>> maxElement(Arrays.asList(1, 2, 3))\n    3\n    >>> maxElement(Arrays.asList(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    123\n     */\n    public int maxElement(List<Integer> l) {\n", "reference": "        return Collections.max(l);\n    }\n}", "prediction": "\tint max = l.get(0);\n\tfor (int i = 1; i < l.size(); i++) {\n\t    if (l.get(i) > max) {\n\t\tmax = l.get(i);\n\t    }\n\t}\n\treturn max;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/36", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     */\n    public int fizzBuzz(int n) {\n", "reference": "        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 1; i < n; i++) {\n\t    if (i % 11 == 0 || i % 13 == 0) {\n\t\tString s = Integer.toString(i);\n\t\tfor (int j = 0; j < s.length(); j++) {\n\t\t    if (s.charAt(j) == '7') {\n\t\t\tcount++;\n\t\t    }\n\t\t}\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/37", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sortEven(Arrays.asList(1, 2, 3))\n    [1, 2, 3]\n    >>> sortEven(Arrays.asList(5, 6, 3, 4))\n    [3, 6, 5, 4]\n     */\n    public List<Integer> sortEven(List<Integer> l) {\n", "reference": "        List<Integer> even = new ArrayList<>();\n        for (int i = 0; i < l.size(); i += 2) {\n            even.add(l.get(i));\n        }\n        Collections.sort(even);\n        List<Integer> result = l;\n        for (int i = 0; i < l.size(); i += 2) {\n            result.set(i, even.get(i / 2));\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> l2 = new ArrayList<Integer>();\n\tfor (int i = 0; i < l.size(); i++) {\n\t    if (i % 2 == 0) {\n\t\tl2.add(l.get(i));\n\t    }\n\t}\n\tCollections.sort(l2);\n\tfor (int i = 0; i < l.size(); i++) {\n\t    if (i % 2 == 1) {\n\t\tl2.add(l.get(i));\n\t    }\n\t}\n\treturn l2;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/38", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by cycling groups of three characters.\n     */\n    public String encodeCyclic(String s) {\n        // split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        // cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    /**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     */\n    public String decodeCyclic(String s) {\n", "reference": "        return encodeCyclic(encodeCyclic(s));\n    }\n}", "prediction": "//        List<String> groups = new ArrayList<>();\n//        for (int i = 0; i < s.length(); i += 3) {\n//            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n//        }\n//        for (int i = 0; i < groups.size(); i++) {\n//            if (groups.get(i).length() == 3) {\n//                groups.set(i, groups.get(i).charAt(2) + groups.get(i).substring(0, 2));\n//            }\n//        }\n//        return String.join(\"\", groups);\n        return encodeCyclic(s);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/39", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     */\n    public int primeFib(int n) {\n", "reference": "        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}", "prediction": "\tint[] fib = new int[n];\n\tfib[0] = 0;\n\tfib[1] = 1;\n\tint i = 2;\n\twhile (i < n) {\n\t    fib[i] = fib[i-1] + fib[i-2];\n\t    i++;\n\t}\n\tint[] primes = new int[n];\n\tprimes[0] = 2;\n\tprimes[1] = 3;\n\ti = 2;\n\twhile (i < n) {\n\t    primes[i] = primes[i-1] + 2;\n\t    i++;\n\t}\n\tint j = 0;\n\twhile (j < n) {\n\t    if (fib[j] == primes[j]) {\n\t\treturn fib[j];\n\t    }\n\t    j++;\n\t}\n\treturn 0;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/40", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    triplesSumToZero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triplesSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> triplesSumToZero(Arrays.asList(1, 3, -2, 1))\n    true\n    >>> triplesSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> triplesSumToZero(Arrays.asList(2, 4, -5, 3, 9, 7))\n    true\n    >>> triplesSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean triplesSumToZero(List<Integer> l) {\n", "reference": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n                    if (l.get(i) + l.get(j) + l.get(k) == 0) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "prediction": "\t// YOUR CODE HERE\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/41", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     */\n    public int carRaceCollision(int n) {\n", "reference": "        return n * n;\n    }\n}", "prediction": "\tint[] left = new int[n];\n\tint[] right = new int[n];\n\tint[] left_pos = new int[n];\n\tint[] right_pos = new int[n];\n\tint[] left_speed = new int[n];\n\tint[] right_speed = new int[n];\n\tint[] left_time = new int[n];\n\tint[] right_time = new int[n];\n\tint[] left_collision = new int[n];\n\tint[] right_collision = new int[n];\n\tint[] left_collision_time = new int[n];\n\tint[] right_collision_time = new int[n];\n\tint[] left_collision_pos = new int[n];\n\tint[] right_collision_pos = new int[n];\n\tint[] left_collision_speed = new int[n];\n\tint[] right_collision_speed = new int[n];\n\tint[] left_collision_index = new int[n];\n\tint[] right_collision_index = new int[n];\n\tint[] left_collision_count = new int[n];\n\tint[] right_collision_count = new int[n];\n\tint[] left_collision_count_index = new int[n];\n\tint[] right_collision_count_index = new int[n];\n\tint[] left_collision_count_time = new int[n];\n\tint[] right_collision_count_time = new int[n];\n\tint[] left_collision_count_pos = new int[n];\n\tint[] right_collision_count_pos = new int[n];\n\tint[] left_collision_count_speed = new int[n];\n\tint[] right_collision_count_speed = new int[n];\n\tint[] left_collision_count_index_index = new int[n];\n\tint[] right_collision_count_index_index = new int[n];\n\tint[] left_collision_count_index_time = new int[n];\n\tint[] right_collision_count_index_time = new int[n];\n\tint[] left_collision_count_index_pos = new int[n];\n\tint[] right_collision_count_index_pos = new int[n];\n\tint[] left_collision_count_index_speed = new int[n];\n\tint[] right_collision_count_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index_index = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index_time = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index_time = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index_pos = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index_pos = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index_speed = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index_speed = new int[n];\n\tint[] left_collision_count_index_index_index_index_index_index_index_index_index = new int[n];\n\tint[] right_collision_count_index_index_index_index_index_index_index_index_index = new int[n];\n\t", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/42", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\nimport java.util.stream.Collectors;\n\nclass Solution {\n    /**\n    Return list with elements incremented by 1.\n    >>> incrList(Arrays.asList(1, 2, 3))\n    [2, 3, 4]\n    >>> incrList(Arrays.asList(5, 3, 5, 2, 3, 3, 9, 0, 123))\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n     */\n    public List<Integer> incrList(List<Integer> l) {\n", "reference": "        return l.stream().map(p -> p + 1).collect(Collectors.toList());\n    }\n}", "prediction": "\treturn l.stream().map(x -> x + 1).collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/43", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    pairsSumToZero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairsSumToZero(Arrays.asList(1, 3, 5, 0))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 3, -2, 1))\n    false\n    >>> pairsSumToZero(Arrays.asList(1, 2, 3, 7))\n    false\n    >>> pairsSumToZero(Arrays.asList(2, 4, -5, 3, 5, 7))\n    true\n    >>> pairsSumToZero(Arrays.asList(1))\n    false\n     */\n    public boolean pairsSumToZero(List<Integer> l) {\n", "reference": "        for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n                if (l.get(i) + l.get(j) == 0) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "prediction": "\t// YOUR CODE HERE\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/44", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     */\n    public String changeBase(int x, int base) {\n", "reference": "        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x /= base;\n        }\n        return ret.reverse().toString();\n    }\n}", "prediction": "\t// TODO: implement this method\n\treturn \"\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/45", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given length of a side and high return area for a triangle.\n    >>> triangleArea(5, 3)\n    7.5\n     */\n    public double triangleArea(double a, double h) {\n", "reference": "        return a * h / 2;\n    }\n}", "prediction": "\treturn a * h / 2;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/46", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n     */\n    public int fib4(int n) {\n", "reference": "        List<Integer> results = new ArrayList<>();\n        results.add(0);\n        results.add(0);\n        results.add(2);\n        results.add(0);\n        if (n < 4) {\n            return results.get(n);\n        }\n\n        for (int i = 4; i <= n; i++) {\n            results.add(results.get(0) + results.get(1) + results.get(2) + results.get(3));\n            results.remove(0);\n        }\n        return results.get(3);\n    }\n}", "prediction": "\tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 2;\n\tif (n == 3) return 0;\n\tint[] fib = new int[n+1];\n\tfib[0] = 0;\n\tfib[1] = 0;\n\tfib[2] = 2;\n\tfib[3] = 0;\n\tfor (int i = 4; i <= n; i++) {\n\t    fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4];\n\t}\n\treturn fib[n];\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/47", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     */\n    public double median(List<Integer> l) {\n", "reference": "        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() / 2);\n        } else {\n            return (l.get(l.size() / 2 - 1) + l.get(l.size() / 2)) / 2.0;\n        }\n    }\n}", "prediction": "\tCollections.sort(l);\n\tint size = l.size();\n\tif (size % 2 == 0) {\n\t    return (l.get(size / 2) + l.get(size / 2 - 1)) / 2.0;\n\t} else {\n\t    return l.get(size / 2);\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/48", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     */\n    public boolean isPalindrome(String text) {\n", "reference": "        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tif (text.length() == 0) {\n\t    return true;\n\t}\n\tif (text.length() == 1) {\n\t    return true;\n\t}\n\tif (text.charAt(0) == text.charAt(text.length() - 1)) {\n\t    return isPalindrome(text.substring(1, text.length() - 1));\n\t}\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/49", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     */\n    public int modp(int n, int p) {\n", "reference": "        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}", "prediction": "\tif (n == 0) {\n\t    return 1;\n\t}\n\tif (n == 1) {\n\t    return 2;\n\t}\n\tif (n % 2 == 0) {\n\t    return modp(n / 2, p) * modp(n / 2, p) % p;\n\t} else {\n\t    return modp(n / 2, p) * modp(n / 2, p) * 2 % p;\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/50", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     */\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    /**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     */\n    public String decodeShift(String s) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}", "prediction": "\tStringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch - 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/51", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     */\n    public String removeVowels(String text) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}", "prediction": "\tString vowels = \"aeiouAEIOU\";\n\tString result = \"\";\n\tfor (int i = 0; i < text.length(); i++) {\n\t    if (vowels.indexOf(text.charAt(i)) == -1) {\n\t\tresult += text.charAt(i);\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/52", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True if all numbers in the list l are below threshold t.\n    >>> belowThreshold(Arrays.asList(1, 2, 4, 10), 100)\n    true\n    >>> belowThreshold(Arrays.asList(1, 20, 4, 10), 5)\n    false\n     */\n    public boolean belowThreshold(List<Integer> l, int t) {\n", "reference": "        for (int e : l) {\n            if (e >= t) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tfor (int i : l) {\n\t    if (i >= t) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/53", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     */\n    public int add(int x, int y) {\n", "reference": "        return x + y;\n    }\n}", "prediction": "\treturn x + y;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/54", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Check if two words have the same characters.\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n    true\n    >>> sameChars(\"abcd\", \"dddddddabc\")\n    true\n    >>> sameChars(\"dddddddabc\", \"abcd\")\n    true\n    >>> sameChars(\"eabcd\", \"dddddddabc\")\n    false\n    >>> sameChars(\"abcd\", \"dddddddabce\")\n    false\n    >>> sameChars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n    false\n     */\n    public boolean sameChars(String s0, String s1) {\n", "reference": "        Set<Character> set0 = new HashSet<>();\n        for (char c : s0.toCharArray()) {\n            set0.add(c);\n        }\n        Set<Character> set1 = new HashSet<>();\n        for (char c : s1.toCharArray()) {\n            set1.add(c);\n        }\n        return set0.equals(set1);\n    }\n}", "prediction": "\t// TODO: implement this method\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/55", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     */\n    public int fib(int n) {\n", "reference": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}", "prediction": "\tif (n == 1) {\n\t    return 1;\n\t}\n\tif (n == 2) {\n\t    return 1;\n\t}\n\treturn fib(n-1) + fib(n-2);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/56", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "reference": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "prediction": "\tStack<Character> stack = new Stack<Character>();\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\t    if (c == '<') {\n\t\tstack.push(c);\n\t    } else if (c == '>') {\n\t\tif (stack.isEmpty()) {\n\t\t    return false;\n\t\t} else {\n\t\t    stack.pop();\n\t\t}\n\t    }\n\t}\n\treturn stack.isEmpty();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/57", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic(Arrays.asList(1, 2, 4, 20))\n    true\n    >>> monotonic(Arrays.asList(1, 20, 4, 10))\n    false\n    >>> monotonic(Arrays.asList(4, 1, 0, -10))\n    true\n     */\n    public boolean monotonic(List<Integer> l) {\n", "reference": "        List<Integer> l1 = new ArrayList<>(l), l2 = new ArrayList<>(l);\n        Collections.sort(l1);\n        l2.sort(Collections.reverseOrder());\n        return l.equals(l1) || l.equals(l2);\n    }\n}", "prediction": "\tif (l.size() < 2) {\n\t    return true;\n\t}\n\tboolean increasing = true;\n\tboolean decreasing = true;\n\tfor (int i = 0; i < l.size() - 1; i++) {\n\t    if (l.get(i) < l.get(i + 1)) {\n\t\tdecreasing = false;\n\t    } else if (l.get(i) > l.get(i + 1)) {\n\t\tincreasing = false;\n\t    }\n\t}\n\treturn increasing || decreasing;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/58", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return sorted unique common elements for two lists.\n    >>> common(Arrays.asList(1, 4, 3, 34, 653, 2, 5), Arrays.asList(5, 7, 1, 5, 9, 653, 121))\n    [1, 5, 653]\n    >>> common(Arrays.asList(5, 3, 2, 8), Arrays.asList(3, 2))\n    [2, 3]\n     */\n    public List<Integer> common(List<Integer> l1, List<Integer> l2) {\n", "reference": "        Set<Integer> ret = new HashSet<>(l1);\n        ret.retainAll(new HashSet<>(l2));\n        List<Integer> result = new ArrayList<>(ret);\n        Collections.sort(result);\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tfor (int i = 0; i < l1.size(); i++) {\n\t    for (int j = 0; j < l2.size(); j++) {\n\t\tif (l1.get(i) == l2.get(j)) {\n\t\t    result.add(l1.get(i));\n\t\t}\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/59", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     */\n    public int largestPrimeFactor(int n) {\n", "reference": "        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}", "prediction": "\tint largest = 0;\n\tfor (int i = 2; i <= n; i++) {\n\t    if (n % i == 0) {\n\t\tif (isPrime(i)) {\n\t\t    largest = i;\n\t\t}\n\t\tn /= i;\n\t\ti--;\n\t    }\n\t}\n\treturn largest;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/60", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     */\n    public int sumToN(int n) {\n", "reference": "        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}", "prediction": "\tint sum = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t    sum += i;\n\t}\n\treturn sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/61", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     */\n    public boolean correctBracketing(String brackets) {\n", "reference": "        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}", "prediction": "\tStack<Character> stack = new Stack<Character>();\n\tfor (int i = 0; i < brackets.length(); i++) {\n\t    char c = brackets.charAt(i);\n\t    if (c == '(') {\n\t\tstack.push(c);\n\t    } else if (c == ')') {\n\t\tif (stack.isEmpty()) {\n\t\t    return false;\n\t\t} else {\n\t\t    stack.pop();\n\t\t}\n\t    }\n\t}\n\treturn stack.isEmpty();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/62", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    >>> derivative(Arrays.asList(3, 1, 2, 4, 5))\n    [1, 4, 12, 20]\n    >>> derivative(Arrays.asList(1, 2, 3]))\n    [2, 6]\n     */\n    public List<Integer> derivative(List<Integer> xs) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < xs.size(); i++) {\n            result.add(i * xs.get(i));\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tfor (int i = 1; i < xs.size(); i++) {\n\t    result.add(xs.get(i) * i);\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/63", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n     */\n    public int fibfib(int n) {\n", "reference": "        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}", "prediction": "\tif (n == 0) {\n\t    return 0;\n\t} else if (n == 1) {\n\t    return 0;\n\t} else if (n == 2) {\n\t    return 1;\n\t} else {\n\t    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/64", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function vowelsCount which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowelsCount(\"abcde\")\n    2\n    >>> vowelsCount(\"ACEDY\")\n    3\n     */\n    public int vowelsCount(String s) {\n", "reference": "        String vowels = \"aeiouAEIOU\";\n        int n_vowels = 0;\n        for (char c : s.toCharArray()) {\n            if (vowels.indexOf(c) != -1) {\n                n_vowels += 1;\n            }\n        }\n        if (s.charAt(s.length() - 1) == 'y' || s.charAt(s.length() - 1) == 'Y') {\n            n_vowels += 1;\n        }\n        return n_vowels;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/65", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circularShift(12, 1)\n    \"21\"\n    >>> circularShift(12, 2)\n    \"12\"\n     */\n    public String circularShift(int x, int shift) {\n", "reference": "        String s = String.valueOf(x);\n        if (shift > s.length()) {\n            return new StringBuilder(s).reverse().toString();\n        } else {\n            return s.substring(s.length() - shift) + s.substring(0, s.length() - shift);\n        }\n    }\n}", "prediction": "\tString s = Integer.toString(x);\n\tint len = s.length();\n\tif (shift > len) {\n\t    return new StringBuilder(s).reverse().toString();\n\t}\n\treturn s.substring(len - shift, len) + s.substring(0, len - shift);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/66", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     */\n    public int digitSum(String s) {\n", "reference": "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}", "prediction": "\tint sum = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t    if (Character.isUpperCase(s.charAt(i))) {\n\t\tsum += (int) s.charAt(i);\n\t    }\n\t}\n\treturn sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/67", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     */\n    public int fruitDistribution(String s, int n) {\n", "reference": "        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}", "prediction": "\tint apples = Integer.parseInt(s.substring(0, s.indexOf(\" \")));\n\tint oranges = Integer.parseInt(s.substring(s.indexOf(\" \") + 13, s.indexOf(\" \", s.indexOf(\" \") + 1)));\n\treturn n - apples - oranges;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/68", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 3:\n        Input: []\n        Output: []\n\n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n     */\n    public List<Integer> pluck(List<Integer> arr) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        if (arr.size() == 0) {\n            return result;\n        }\n        int min = Integer.MAX_VALUE;\n        int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n                if (arr.get(i) < min) {\n                    min = arr.get(i);\n                    minIndex = i;\n                }\n            }\n        }\n        if (minIndex != -1) {\n            result.add(min);\n            result.add(minIndex);\n        }\n        return result;\n    }\n}", "prediction": "//        if (arr.size() == 0) return new ArrayList<>();\n//        int min = Integer.MAX_VALUE;\n//        int minIndex = 0;\n//        for (int i = 0; i < arr.size(); i++) {\n//            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n//                min = arr.get(i);\n//                minIndex = i;\n//            }\n//        }\n//        if (min == Integer.MAX_VALUE) return new ArrayList<>();\n//        return Arrays.asList(min, minIndex);\n\n        int min = Integer.MAX_VALUE;\n        int minIndex = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min) {\n                min = arr.get(i);\n                minIndex = i;\n            }\n        }\n        if (min == Integer.MAX_VALUE) return new ArrayList<>();\n        return Arrays.asList(min, minIndex);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/69", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n    zero, and has a frequency greater than or equal to the value of the integer itself.\n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search(Arrays.asList(4, 1, 2, 2, 3, 1)) == 2\n        search(Arrays.asList(1, 2, 2, 3, 3, 3, 4, 4, 4)) == 3\n        search(Arrays.asList(5, 5, 4, 4, 4)) == -1\n     */\n    public int search(List<Integer> lst) {\n", "reference": "        int[] frq = new int[Collections.max(lst) + 1];\n        for (int i : lst) {\n            frq[i] += 1;\n        }\n        int ans = -1;\n        for (int i = 1; i < frq.length; i++) {\n            if (frq[i] >= i) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n}", "prediction": "//        Map<Integer, Integer> map = new HashMap<>();\n//        for (int i = 0; i < lst.size(); i++) {\n//            if (map.containsKey(lst.get(i))) {\n//                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n//            } else {\n//                map.put(lst.get(i), 1);\n//            }\n//        }\n//        int max = 0;\n//        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n//            if (entry.getKey() > max && entry.getValue() >= entry.getKey()) {\n//                max = entry.getKey();\n//            }\n//        }\n//        return max == 0? -1 : max;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (map.containsKey(lst.get(i))) {\n                map.put(lst.get(i), map.get(lst.get(i)) + 1);\n            } else {\n                map.put(lst.get(i), 1);\n            }\n        }\n        int max = 0;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            if (entry.getKey() > max && entry.getValue() >= entry.getKey()) {\n                max = entry.getKey();\n            }\n        }\n        return max == 0? -1 : max;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/70", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strangeSortList(Arrays.asList(1, 2, 3, 4)) == Arrays.asList(1, 4, 2, 3)\n    strangeSortList(Arrays.asList(5, 5, 5, 5)) == Arrays.asList(5, 5, 5, 5)\n    strangeSortList(Arrays.asList()) == Arrays.asList()\n     */\n    public List<Integer> strangeSortList(List<Integer> lst) {\n", "reference": "        List<Integer> res = new ArrayList<>();\n        boolean _switch = true;\n        List<Integer> l = new ArrayList<>(lst);\n        while (l.size() != 0) {\n            if (_switch) {\n                res.add(Collections.min(l));\n            } else {\n                res.add(Collections.max(l));\n            }\n            l.remove(res.get(res.size() - 1));\n            _switch = !_switch;\n        }\n        return res;\n    }\n}", "prediction": "\tif (lst.size() == 0) {\n\t    return lst;\n\t}\n\tList<Integer> result = new ArrayList<Integer>();\n\tint min = Integer.MAX_VALUE;\n\tint max = Integer.MIN_VALUE;\n\tint minIndex = 0;\n\tint maxIndex = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t    if (lst.get(i) < min) {\n\t\tmin = lst.get(i);\n\t\tminIndex = i;\n\t    }\n\t    if (lst.get(i) > max) {\n\t\tmax = lst.get(i);\n\t\tmaxIndex = i;\n\t    }\n\t}\n\tresult.add(min);\n\tresult.add(max);\n\tlst.remove(minIndex);\n\tlst.remove(maxIndex);\n\twhile (lst.size() > 0) {\n\t    min = Integer.MAX_VALUE;\n\t    max = Integer.MIN_VALUE;\n\t    minIndex = 0;\n\t    maxIndex = 0;\n\t    for (int i = 0; i < lst.size(); i++) {\n\t\tif (lst.get(i) < min) {\n\t\t    min = lst.get(i);\n\t\t    minIndex = i;\n\t\t}\n\t\tif (lst.get(i) > max) {\n\t\t    max = lst.get(i);\n\t\t    maxIndex = i;\n\t\t}\n\t    }\n\t    result.add(min);\n\t    result.add(max);\n\t    lst.remove(minIndex);\n\t    lst.remove(maxIndex);\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/71", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     */\n    public double triangleArea(double a, double b, double c) {\n", "reference": "        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) / 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) / 100;\n        return area;\n    }\n}", "prediction": "\tif (a + b > c && a + c > b && b + c > a) {\n\t    double s = (a + b + c) / 2;\n\t    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\t}\n\treturn -1;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/72", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    willItFly(Arrays.asList(1, 2), 5) -> false\n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    willItFly(Arrays.asList(3, 2, 3), 1) -> false\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    willItFly(Arrays.asList(3, 2, 3), 9) -> true\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    willItFly(Arrays.asList(3), 5) -> true\n    # 3 is less than the maximum possible weight, and it's balanced.\n     */\n    public boolean willItFly(List<Integer> q, int w) {\n", "reference": "        if (q.stream().reduce(0, Integer::sum) > w) {\n            return false;\n        }\n        int i = 0, j = q.size() - 1;\n        while (i < j) {\n            if (!Objects.equals(q.get(i), q.get(j))) {\n                return false;\n            }\n            i += 1;\n            j -= 1;\n        }\n        return true;\n    }\n}", "prediction": "//        int sum = 0;\n//        for (int i = 0; i < q.size(); i++) {\n//            sum += q.get(i);\n//        }\n//        if (sum <= w) {\n//            return true;\n//        } else {\n//            return false;\n//        }\n        return q.stream().reduce(0, Integer::sum) <= w && isPalindrome(q);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/73", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallestChange(Arrays.asList(1,2,3,5,4,7,9,6)) == 4\n    smallestChange(Arrays.asList(1, 2, 3, 4, 3, 2, 2)) == 1\n    smallestChange(Arrays.asList(1, 2, 3, 2, 1)) == 0\n     */\n    public int smallestChange(List<Integer> arr) {\n", "reference": "        int ans = 0;\n        for (int i = 0; i < arr.size() / 2; i++) {\n            if (!Objects.equals(arr.get(i), arr.get(arr.size() - i - 1))) {\n                ans += 1;\n            }\n        }\n        return ans;\n    }\n}", "prediction": "\tint[] dp = new int[arr.size()];\n\tint[] dp2 = new int[arr.size()];\n\tint[] dp3 = new int[arr.size()];\n\tint[] dp4 = new int[arr.size()];\n\tint[] dp5 = new int[arr.size()];\n\tint[] dp6 = new int[arr.size()];\n\tint[] dp7 = new int[arr.size()];\n\tint[] dp8 = new int[arr.size()];\n\tint[] dp9 = new int[arr.size()];\n\tint[] dp10 = new int[arr.size()];\n\tint[] dp11 = new int[arr.size()];\n\tint[] dp12 = new int[arr.size()];\n\tint[] dp13 = new int[arr.size()];\n\tint[] dp14 = new int[arr.size()];\n\tint[] dp15 = new int[arr.size()];\n\tint[] dp16 = new int[arr.size()];\n\tint[] dp17 = new int[arr.size()];\n\tint[] dp18 = new int[arr.size()];\n\tint[] dp19 = new int[arr.size()];\n\tint[] dp20 = new int[arr.size()];\n\tint[] dp21 = new int[arr.size()];\n\tint[] dp22 = new int[arr.size()];\n\tint[] dp23 = new int[arr.size()];\n\tint[] dp24 = new int[arr.size()];\n\tint[] dp25 = new int[arr.size()];\n\tint[] dp26 = new int[arr.size()];\n\tint[] dp27 = new int[arr.size()];\n\tint[] dp28 = new int[arr.size()];\n\tint[] dp29 = new int[arr.size()];\n\tint[] dp30 = new int[arr.size()];\n\tint[] dp31 = new int[arr.size()];\n\tint[] dp32 = new int[arr.size()];\n\tint[] dp33 = new int[arr.size()];\n\tint[] dp34 = new int[arr.size()];\n\tint[] dp35 = new int[arr.size()];\n\tint[] dp36 = new int[arr.size()];\n\tint[] dp37 = new int[arr.size()];\n\tint[] dp38 = new int[arr.size()];\n\tint[] dp39 = new int[arr.size()];\n\tint[] dp40 = new int[arr.size()];\n\tint[] dp41 = new int[arr.size()];\n\tint[] dp42 = new int[arr.size()];\n\tint[] dp43 = new int[arr.size()];\n\tint[] dp44 = new int[arr.size()];\n\tint[] dp45 = new int[arr.size()];\n\tint[] dp46 = new int[arr.size()];\n\tint[] dp47 = new int[arr.size()];\n\tint[] dp48 = new int[arr.size()];\n\tint[] dp49 = new int[arr.size()];\n\tint[] dp50 = new int[arr.size()];\n\tint[] dp51 = new int[arr.size()];\n\tint[] dp52 = new int[arr.size()];\n\tint[] dp53 = new int[arr.size()];\n\tint[] dp54 = new int[arr.size()];\n\tint[] dp55 = new int[arr.size()];\n\tint[] dp56 = new int[arr.size()];\n\tint[] dp57 = new int[arr.size()];\n\tint[] dp58 = new int[arr.size()];\n\tint[] dp59 = new int[arr.size()];\n\tint[] dp60 = new int[arr.size()];\n\tint[] dp61 = new int[arr.size()];\n\tint[] dp62 = new int[arr.size()];\n\tint[] dp63 = new int[arr.size()];\n\tint[] dp64 = new int[arr.size()];\n\tint[] dp65 = new int[arr.size()];\n\tint[] dp66 = new int[arr.size()];\n\tint[] dp67 = new int[arr.size()];\n\tint[] dp68 = new int[arr.size()];\n\tint[] dp69 = new int[arr.size()];\n\tint[] dp70 = new int[arr.size()];\n\tint[] dp71 = new int[arr.size()];\n\tint[] dp72 = new int[arr.size()];\n\tint[] dp73 = new int[arr.size()];\n\tint[] dp74 = new int[arr.size()];\n\tint[] dp75 = new int[arr.size()];\n\tint[] dp76 = new int[arr.size()];\n\tint[] dp77 = new int[arr.size()];\n\tint[] dp78 = new int[arr.size()];\n\tint[] dp79 = new int[arr.size()];\n\tint[] dp80 = new int[arr.size()];\n\tint[] dp81 = new int[arr.size()];\n\tint[] dp82 = new int[arr.size()];\n\tint[] dp83 = new int[arr.size()];\n\tint[] dp84 = new int[arr.size()];\n\tint[] dp85 = new int[arr.size()];\n\tint[] dp86 = new int[arr.size()];\n\tint[] dp87 = new int[arr.size()];\n\tint[] dp88 = new int[arr.size()];\n\tint[] dp89 = new int[arr.size()];\n\tint[] dp90 = new int[arr.size()];\n\tint[] dp91 = new int[arr.size()];\n\tint[] dp92 = new int[arr.size()];\n\tint[] dp93 = new int[arr.size()];\n\tint[] dp94 = new int[arr.size()];\n\tint[] dp95 = new int[arr.size()];\n\tint[] dp96 = new int[arr.size()];\n\tint[] dp97 = new int[arr.size()];\n\tint[] dp98 = new int[arr.size()];\n\tint[] dp99 = new int[arr.size()];\n\tint[] dp100 = new int[arr.size()];\n\tint[] dp101 = new int[arr.size()];\n\tint[] dp102 = new int[arr.size()];\n\tint[] dp103 = new int[arr.size()];\n\tint[] dp104 = new int[arr.size()];\n\tint[] dp105 = new int[arr.size()];\n\tint[] dp106 = new int[arr.size()];\n\tint[] dp107 = new int[arr.size()];\n\tint[] dp108 = new int[arr.size()];\n\tint[] dp109 = new int[arr.size()];\n\tint[] dp110 = new int[arr.size()];\n\tint[] dp111 = new int[arr.size()];\n\tint[] dp112 = new int[arr.size()];\n\tint[] dp113 = new int[arr.size()];\n\tint[] dp114 = new int[arr.size()];\n\tint[] dp115 = new int[arr.size()];\n\tint[] dp116 = new int[arr.size()];\n\tint[] dp117 = new int[arr.size()];\n\tint[] dp118 = new int[arr.size()];\n\tint[] dp119 = new int[arr.size()];\n\tint[] dp120 = new int[arr.size()];\n\tint[] dp121 = new int[arr.size()];\n\tint[] dp122 = new int[arr.size()];\n\tint[] dp123 = new int[arr.size()];\n\tint[] dp12", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/74", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     */\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n", "reference": "        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}", "prediction": "\tint sum1 = 0;\n\tint sum2 = 0;\n\tfor (String s : lst1) {\n\t    sum1 += s.length();\n\t}\n\tfor (String s : lst2) {\n\t    sum2 += s.length();\n\t}\n\tif (sum1 < sum2) {\n\t    return lst1;\n\t} else if (sum2 < sum1) {\n\t    return lst2;\n\t} else {\n\t    return lst1;\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/75", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     */\n    public boolean isMultiplyPrime(int a) {\n", "reference": "        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 2; i <= a; i++) {\n\t    if (a % i == 0) {\n\t\tcount++;\n\t\ta /= i;\n\t\ti--;\n\t    }\n\t}\n\treturn count == 3;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/76", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     */\n    public boolean isSimplePower(int x, int n) {\n", "reference": "        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}", "prediction": "\tif (x == 1) return true;\n\tif (x < n) return false;\n\tif (x % n!= 0) return false;\n\treturn isSimplePower(x / n, n);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/77", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     */\n    public boolean iscube(int a) {\n", "reference": "        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. / 3)), 3)) == a;\n    }\n}", "prediction": "\tif (a == 0) return true;\n\tif (a < 0) a = -a;\n\tint i = 1;\n\twhile (i * i * i < a) i++;\n\treturn i * i * i == a;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/78", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have been tasked to write a function that receives\n    a hexadecimal number as a string and counts the number of hexadecimal\n    digits that are primes (prime number, or a prime, is a natural number\n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7,\n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string,\n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n     */\n    public int hexKey(String num) {\n", "reference": "        String primes = \"2357BD\";\n        int total = 0;\n        for (char c : num.toCharArray()) {\n            if (primes.indexOf(c) != -1) {\n                total += 1;\n            }\n        }\n        return total;\n    }\n}", "prediction": "//        String[] hex = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"};\n//        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n//        int count = 0;\n//        for (int i = 0; i < num.length(); i++) {\n//            for (int j = 0; j < hex.length; j++) {\n//                if (num.charAt(i) == hex[j].charAt(0)) {\n//                    for (int k = 0; k < primes.length; k++) {\n//                        if (primes[k] == j) {\n//                            count++;\n//                        }\n//                    }\n//                }\n//            }\n//        }\n//        return count;\n        int count = 0;\n        for (int i = 0; i < num.length(); i++) {\n            int hex = Integer.parseInt(num.charAt(i) + \"\", 16);\n            if (hex == 2 || hex == 3 || hex == 5 || hex == 7 || hex == 11 || hex == 13) {\n                count++;\n            }\n        }\n        return count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/79", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimalToBinary(15)   // returns \"db1111db\"\n    decimalToBinary(32)   // returns \"db100000db\"\n     */\n    public String decimalToBinary(int decimal) {\n", "reference": "        return \"db\" + Integer.toBinaryString(decimal) + \"db\";\n    }\n}", "prediction": "\tString binary = \"\";\n\twhile (decimal > 0) {\n\t    binary = (decimal % 2) + binary;\n\t    decimal /= 2;\n\t}\n\treturn \"db\" + binary + \"db\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/80", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     */\n    public boolean isHappy(String s) {\n", "reference": "        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tif(s.length() < 3) return false;\n\tfor(int i = 0; i < s.length() - 2; i++) {\n\t    if(s.charAt(i) == s.charAt(i+1) && s.charAt(i+1) == s.charAt(i+2)) return false;\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/81", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write\n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A\n            > 3.3                A-\n            > 3.0                B+\n            > 2.7                B\n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+\n            > 0.7                D\n            > 0.0                D-\n              0.0                E\n\n\n    Example:\n    numericalLetterGrade(Arrays.asList(4.0, 3, 1.7, 2, 3.5)) ==> [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n     */\n    public List<String> numericalLetterGrade(List<Double> grades) {\n", "reference": "        List<String> letter_grade = new ArrayList<>();\n        for (double gpa : grades) {\n            if (gpa == 4.0) {\n                letter_grade.add(\"A+\");\n            } else if (gpa > 3.7) {\n                letter_grade.add(\"A\");\n            } else if (gpa > 3.3) {\n                letter_grade.add(\"A-\");\n            } else if (gpa > 3.0) {\n                letter_grade.add(\"B+\");\n            } else if (gpa > 2.7) {\n                letter_grade.add(\"B\");\n            } else if (gpa > 2.3) {\n                letter_grade.add(\"B-\");\n            } else if (gpa > 2.0) {\n                letter_grade.add(\"C+\");\n            } else if (gpa > 1.7) {\n                letter_grade.add(\"C\");\n            } else if (gpa > 1.3) {\n                letter_grade.add(\"C-\");\n            } else if (gpa > 1.0) {\n                letter_grade.add(\"D+\");\n            } else if (gpa > 0.7) {\n                letter_grade.add(\"D\");\n            } else if (gpa > 0.0) {\n                letter_grade.add(\"D-\");\n            } else {\n                letter_grade.add(\"E\");\n            }\n        }\n        return letter_grade;\n    }\n}", "prediction": "\tList<String> letterGrades = new ArrayList<String>();\n\tfor (Double grade : grades) {\n\t    if (grade >= 4.0) {\n\t\tletterGrades.add(\"A+\");\n\t    } else if (grade >= 3.7) {\n\t\tletterGrades.add(\"A\");\n\t    } else if (grade >= 3.3) {\n\t\tletterGrades.add(\"A-\");\n\t    } else if (grade >= 3.0) {\n\t\tletterGrades.add(\"B+\");\n\t    } else if (grade >= 2.7) {\n\t\tletterGrades.add(\"B\");\n\t    } else if (grade >= 2.3) {\n\t\tletterGrades.add(\"B-\");\n\t    } else if (grade >= 2.0) {\n\t\tletterGrades.add(\"C+\");\n\t    } else if (grade >= 1.7) {\n\t\tletterGrades.add(\"C\");\n\t    } else if (grade >= 1.3) {\n\t\tletterGrades.add(\"C-\");\n\t    } else if (grade >= 1.0) {\n\t\tletterGrades.add(\"D+\");\n\t    } else if (grade >= 0.7) {\n\t\tletterGrades.add(\"D\");\n\t    } else if (grade >= 0.0) {\n\t\tletterGrades.add(\"D-\");\n\t    } else {\n\t\tletterGrades.add(\"E\");\n\t    }\n\t}\n\treturn letterGrades;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/82", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     */\n    public boolean primeLength(String string) {\n", "reference": "        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tint length = string.length();\n\tfor (int i = 2; i < length; i++) {\n\t    if (length % i == 0) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/83", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     */\n    public int startsOneEnds(int n) {\n", "reference": "        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}", "prediction": "\tif (n == 1) {\n\t    return 1;\n\t}\n\tint count = 0;\n\tfor (int i = 1; i < n; i++) {\n\t    count += startsOneEnds(i) * startsOneEnds(n - i);\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/84", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     */\n    public String solve(int N) {\n", "reference": "        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}", "prediction": "//        String binary = Integer.toBinaryString(N);\n//        int sum = 0;\n//        for (int i = 0; i < binary.length(); i++) {\n//            sum += binary.charAt(i) - '0';\n//        }\n//        return Integer.toBinaryString(sum);\n        return Integer.toBinaryString(Integer.bitCount(N));\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/85", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Examples:\n        add(Arrays.asList(4, 2, 6, 7)) ==> 2\n     */\n    public int add(List<Integer> lst) {\n", "reference": "        int sum = 0;\n        for (int i = 1; i < lst.size(); i += 2) {\n            if (lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "prediction": "//        int sum = 0;\n//        for (int i = 0; i < lst.size(); i++) {\n//            if (lst.get(i) % 2 == 0 && i % 2!= 0) {\n//                sum += lst.get(i);\n//            }\n//        }\n//        return sum;\n        return lst.stream().filter(i -> i % 2 == 0 && lst.indexOf(i) % 2!= 0).reduce(0, Integer::sum);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/86", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    antiShuffle(\"Hi\") returns \"Hi\"\n    antiShuffle(\"hello\") returns \"ehllo\"\n    antiShuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n     */\n    public String antiShuffle(String s) {\n", "reference": "        String[] strings = s.split(\" \");\n        List<String> result = new ArrayList<>();\n        for (String string : strings) {\n            char[] chars = string.toCharArray();\n            Arrays.sort(chars);\n            result.add(String.copyValueOf(chars));\n        }\n        return String.join(\" \", result);\n    }\n}", "prediction": "\tString[] words = s.split(\" \");\n\tfor (int i = 0; i < words.length; i++) {\n\t    char[] chars = words[i].toCharArray();\n\t    Arrays.sort(chars);\n\t    words[i] = new String(chars);\n\t}\n\treturn String.join(\" \", words);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/87", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of lists, [[x1, y1], [x2, y2]...] such that\n    each list is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n\n    Examples:\n    getRow([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n    getRow([], 1) == []\n    getRow([[], [1], [1, 2, 3]], 3) == [[2, 2]]\n     */\n    public List<List<Integer>> getRow(List<List<Integer>> lst, int x) {\n", "reference": "        List<List<Integer>> coords = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            List<List<Integer>> row = new ArrayList<>();\n            for (int j = lst.get(i).size() - 1; j >= 0; j--) {\n                if (lst.get(i).get(j) == x) {\n                    row.add(Arrays.asList(i, j));\n                }\n            }\n            coords.addAll(row);\n        }\n        return coords;\n    }\n}", "prediction": "\tList<List<Integer>> result = new ArrayList<>();\n\tfor (int i = 0; i < lst.size(); i++) {\n\t    for (int j = 0; j < lst.get(i).size(); j++) {\n\t\tif (lst.get(i).get(j) == x) {\n\t\t    List<Integer> temp = new ArrayList<>();\n\t\t    temp.add(i);\n\t\t    temp.add(j);\n\t\t    result.add(temp);\n\t\t}\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/88", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sortArray(Arrays.asList()) => []\n    * sortArray(Arrays.asList(5)) => [5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5)) => [0, 1, 2, 3, 4, 5]\n    * sortArray(Arrays.asList(2, 4, 3, 0, 1, 5, 6)) => [6, 5, 4, 3, 2, 1, 0]\n     */\n    public List<Integer> sortArray(List<Integer> array) {\n", "reference": "        if (array.size() == 0) {\n            return array;\n        }\n        List<Integer> result = new ArrayList<>(array);\n        if ((result.get(0) + result.get(result.size() - 1)) % 2 == 1) {\n            Collections.sort(result);\n        } else {\n            result.sort(Collections.reverseOrder());\n        }\n        return result;\n    }\n}", "prediction": "\tif (array.size() == 0) {\n\t    return array;\n\t}\n\tint first = array.get(0);\n\tint last = array.get(array.size() - 1);\n\tif ((first + last) % 2 == 0) {\n\t    Collections.sort(array, Collections.reverseOrder());\n\t} else {\n\t    Collections.sort(array);\n\t}\n\treturn array;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/89", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     */\n    public String encrypt(String s) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}", "prediction": "\tString alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\tString encrypted = \"\";\n\tfor (int i = 0; i < s.length(); i++) {\n\t    int index = alphabet.indexOf(s.charAt(i));\n\t    int newIndex = (index + 2) % 26;\n\t    encrypted += alphabet.charAt(newIndex);\n\t}\n\treturn encrypted;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/90", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    Write a function nextSmallest() that returns the 2nd smallest element of the list.\n    Return null if there is no such element.\n    <p>\n    nextSmallest(Arrays.asList(1, 2, 3, 4, 5)) == Optional[2]\n    nextSmallest(Arrays.asList(5, 1, 4, 3, 2)) == Optional[2]\n    nextSmallest(Arrays.asList()) == Optional.empty\n    nextSmallest(Arrays.asList(1, 1)) == Optional.empty\n     */\n    public Optional<Integer> nextSmallest(List<Integer> lst) {\n", "reference": "                Set < Integer > set = new HashSet<>(lst);\n        List<Integer> l = new ArrayList<>(set);\n        Collections.sort(l);\n        if (l.size() < 2) {\n            return Optional.empty();\n        } else {\n            return Optional.of(l.get(1));\n        }\n    }\n}", "prediction": "//        if (lst.size() < 2) {\n//            return Optional.empty();\n//        }\n//        int min = Integer.MAX_VALUE;\n//        int secondMin = Integer.MAX_VALUE;\n//        for (int i = 0; i < lst.size(); i++) {\n//            if (lst.get(i) < min) {\n//                secondMin = min;\n//                min = lst.get(i);\n//            } else if (lst.get(i) < secondMin) {\n//                secondMin = lst.get(i);\n//            }\n//        }\n//        if (secondMin == Integer.MAX_VALUE) {\n//            return Optional.empty();\n//        }\n//        return Optional.of(secondMin);\n        if (lst.size() < 2) {\n            return Optional.empty();\n        }\n        int min = Integer.MAX_VALUE;\n        int secondMin = Integer.MAX_VALUE;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) < min) {\n                secondMin = min;\n                min = lst.get(i);\n            } else if (lst.get(i) < secondMin) {\n                secondMin = lst.get(i);\n            }\n        }\n        if (secondMin == Integer.MAX_VALUE) {\n            return Optional.empty();\n        }\n        return Optional.of(secondMin);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/91", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     */\n    public int isBored(String S) {\n", "reference": "        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "prediction": "\tint count = 0;\n\tString[] sentences = S.split(\"[.?!]\");\n\tfor (String sentence : sentences) {\n\t    if (sentence.trim().startsWith(\"I\")) {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/92", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     */\n    public boolean anyInt(Object x, Object y, Object z) {\n", "reference": "        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}", "prediction": "//        return (x instanceof Integer && y instanceof Integer && z instanceof Integer) &&\n//                (x.equals(y + z) || y.equals(x + z) || z.equals(x + y));\n        return (x instanceof Integer && y instanceof Integer && z instanceof Integer) &&\n                (x.equals(y + z) || y.equals(x + z) || z.equals(x + y));\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/93", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     */\n    public String encode(String message) {\n", "reference": "        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}", "prediction": "\t// TODO: Implement me!\n\treturn null;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/94", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n     */\n    public int skjkasdkd(List<Integer> lst) {\n", "reference": "        int maxx = 0;\n        for (int i : lst) {\n            if (i > maxx) {\n                boolean isPrime = i != 1;\n                for (int j = 2; j < Math.sqrt(i) + 1; j++) {\n                    if (i % j == 0) {\n                        isPrime = false;\n                        break;\n                    }\n                }\n                if (isPrime) {\n                    maxx = i;\n                }\n            }\n        }\n        int sum = 0;\n        for (char c : String.valueOf(maxx).toCharArray()) {\n            sum += (c - '0');\n        }\n        return sum;\n    }\n}", "prediction": "//        int max = 0;\n//        for (int i = 0; i < lst.size(); i++) {\n//            if (lst.get(i) > max) {\n//                max = lst.get(i);\n//            }\n//        }\n//        int sum = 0;\n//        while (max > 0) {\n//            sum += max % 10;\n//            max /= 10;\n//        }\n//        return sum;\n        int max = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) > max) {\n                max = lst.get(i);\n            }\n        }\n        int sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n        return sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/95", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     */\n    public boolean checkDictCase(Map<Object, Object> dict) {\n", "reference": "        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}", "prediction": "\tif (dict.isEmpty()) {\n\t    return false;\n\t}\n\tboolean lower = false;\n\tboolean upper = false;\n\tfor (Object key : dict.keySet()) {\n\t    if (key instanceof String) {\n\t\tif (((String) key).equals(((String) key).toLowerCase())) {\n\t\t    lower = true;\n\t\t} else if (((String) key).equals(((String) key).toUpperCase())) {\n\t\t    upper = true;\n\t\t}\n\t    }\n\t}\n\treturn lower &&!upper || upper &&!lower;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/96", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    countUpTo(5) => [2,3]\n    countUpTo(11) => [2,3,5,7]\n    countUpTo(0) => []\n    countUpTo(20) => [2,3,5,7,11,13,17,19]\n    countUpTo(1) => []\n    countUpTo(18) => [2,3,5,7,11,13,17]\n     */\n    public List<Integer> countUpTo(int n) {\n", "reference": "        List<Integer> primes = new ArrayList<>();\n        for (int i = 2; i < n; i++) {\n            boolean is_prime = true;\n            for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                primes.add(i);\n            }\n        }\n        return primes;\n    }\n}", "prediction": "\tList<Integer> primes = new ArrayList<Integer>();\n\tif (n < 2) {\n\t    return primes;\n\t}\n\tboolean[] isPrime = new boolean[n];\n\tfor (int i = 2; i < n; i++) {\n\t    isPrime[i] = true;\n\t}\n\tfor (int i = 2; i * i < n; i++) {\n\t    if (isPrime[i]) {\n\t\tfor (int j = i; i * j < n; j++) {\n\t\t    isPrime[i * j] = false;\n\t\t}\n\t    }\n\t}\n\tfor (int i = 2; i < n; i++) {\n\t    if (isPrime[i]) {\n\t\tprimes.add(i);\n\t    }\n\t}\n\treturn primes;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/97", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Complete the function that takes two integers and returns\n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n     */\n    public int multiply(int a, int b) {\n", "reference": "        return Math.abs(a % 10) * Math.abs(b % 10);\n    }\n}", "prediction": "//        int a1 = a % 10;\n//        int b1 = b % 10;\n//        return a1 * b1;\n        return (a % 10) * (b % 10);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/98", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     */    \n    public int countUpper(String s) {\n", "reference": "        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 0; i < s.length(); i++) {\n\t    if (i % 2 == 0 && s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I' || s.charAt(i) == 'O' || s.charAt(i) == 'U') {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/99", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n     */\n    public int countUpper(String value) {\n", "reference": "        if (value.contains(\".\")) {\n            while (value.charAt(value.length() - 1) == '0') {\n                value = value.substring(0, value.length() - 1);\n            }\n        }\n        double num = Double.parseDouble(value);\n        int res = 0;\n        if (value.substring(Math.max(value.length() - 2, 0)).equals(\".5\")) {\n            if (num > 0) {\n                res = (int) Math.ceil(num);\n            } else {\n                res = (int) Math.floor(num);\n            }\n        } else if(value.length() > 0) {\n            res = (int) Math.round(num);\n        }\n        return res;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 0; i < value.length(); i++) {\n\t    if (Character.isUpperCase(value.charAt(i))) {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/100", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> makeAPile(3)\n    [3, 5, 7]\n     */\n    public List<Integer> makeAPile(int n) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            result.add(n + 2 * i);\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> pile = new ArrayList<Integer>();\n\tint stones = n;\n\twhile (stones > 0) {\n\t    pile.add(stones);\n\t    if (stones % 2 == 0) {\n\t\tstones += 2;\n\t    } else {\n\t\tstones += 1;\n\t    }\n\t}\n\treturn pile;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/101", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\").equals(Arrays.asList(\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\").equals(Arrays.asList(\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n     */\n    public List<String> wordStrings(String s) {\n", "reference": "        if (s.length() == 0) {\n            return List.of();\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (char letter : s.toCharArray()) {\n            if (letter == ',') {\n                sb.append(' ');\n            } else {\n                sb.append(letter);\n            }\n        }\n\n        return new ArrayList<>(Arrays.asList(sb.toString().split(\"\\s+\" )));\n    }\n}", "prediction": "\tString[] words = s.split(\"[, ]\");\n\treturn Arrays.asList(words);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/102", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If\n    there's no such number, then the function should return -1.\n    \n    For example:\n    chooseNum(12, 15) = 14\n    chooseNum(13, 12) = -1\n     */\n    public int chooseNum(int x, int y) {\n", "reference": "        if (x > y) {\n            return -1;\n        }\n        if (y % 2 == 0) {\n            return y;\n        }\n        if (x == y) {\n            return -1;\n        }\n        return y - 1;\n    }\n}", "prediction": "\tint max = -1;\n\tfor (int i = x; i <= y; i++) {\n\t    if (i % 2 == 0) {\n\t\tmax = i;\n\t    }\n\t}\n\treturn max;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/103", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m).\n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    roundedAvg(1, 5) => \"11\"\n    roundedAvg(7, 5) => -1\n    roundedAvg(10, 20) => \"1111\"\n    roundedAvg(20, 33) => \"11011\"\n     */\n    public Object roundedAvg(int n, int m) {\n", "reference": "        if (n > m) {\n            return -1;\n        }\n        return Integer.toBinaryString((int) Math.round((double) (m + n) / 2));\n    }\n}", "prediction": "\tif (n > m) {\n\t    return -1;\n\t}\n\tint sum = 0;\n\tfor (int i = n; i <= m; i++) {\n\t    sum += i;\n\t}\n\tint avg = sum / (m - n + 1);\n\treturn Integer.toBinaryString(avg);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/104", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of positive integers x. return a sorted list of all\n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> uniqueDigits(Arrays.asList(15, 33, 1422, 1))\n    [1, 15, 33]\n    >>> uniqueDigits(Arrays.asList(152, 323, 1422, 10))\n    []\n     */\n    public List<Integer> uniqueDigits(List<Integer> x) {\n", "reference": "        List<Integer> odd_digit_elements = new ArrayList<>();\n        for (int i : x) {\n            boolean is_unique = true;\n            for (char c : String.valueOf(i).toCharArray()) {\n                if ((c - '0') % 2 == 0) {\n                    is_unique = false;\n                    break;\n                }\n            }\n            if (is_unique) {\n                odd_digit_elements.add(i);\n            }\n        }\n        Collections.sort(odd_digit_elements);\n        return odd_digit_elements;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tfor (Integer i : x) {\n\t    if (i % 2!= 0) {\n\t\tresult.add(i);\n\t    }\n\t}\n\tCollections.sort(result);\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/105", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]\n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n      If the array is empty, return an empty array:\n      arr = []\n      return []\n\n      If the array has any strange number ignore it:\n      arr = [1, -1, 55]\n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = [\"One\"]\n     */\n    public List<String> byLength(List<Integer> arr) {\n", "reference": "        List<Integer> sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(Collections.reverseOrder());\n        List<String> new_arr = new ArrayList<>();\n        for (int var : sorted_arr) {\n            if (var >= 1 && var <= 9) {\n                switch (var) {\n                    case 1 -> new_arr.add(\"One\");\n                    case 2 -> new_arr.add(\"Two\");\n                    case 3 -> new_arr.add(\"Three\");\n                    case 4 -> new_arr.add(\"Four\");\n                    case 5 -> new_arr.add(\"Five\");\n                    case 6 -> new_arr.add(\"Six\");\n                    case 7 -> new_arr.add(\"Seven\");\n                    case 8 -> new_arr.add(\"Eight\");\n                    case 9 -> new_arr.add(\"Nine\");\n                }\n            }\n        }\n        return new_arr;\n    }\n}", "prediction": "\tList<String> result = new ArrayList<String>();\n\tif (arr.size() == 0) {\n\t    return result;\n\t}\n\tCollections.sort(arr);\n\tCollections.reverse(arr);\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    if (arr.get(i) >= 1 && arr.get(i) <= 9) {\n\t\tswitch (arr.get(i)) {\n\t\tcase 1:\n\t\t    result.add(\"One\");\n\t\t    break;\n\t\tcase 2:\n\t\t    result.add(\"Two\");\n\t\t    break;\n\t\tcase 3:\n\t\t    result.add(\"Three\");\n\t\t    break;\n\t\tcase 4:\n\t\t    result.add(\"Four\");\n\t\t    break;\n\t\tcase 5:\n\t\t    result.add(\"Five\");\n\t\t    break;\n\t\tcase 6:\n\t\t    result.add(\"Six\");\n\t\t    break;\n\t\tcase 7:\n\t\t    result.add(\"Seven\");\n\t\t    break;\n\t\tcase 8:\n\t\t    result.add(\"Eight\");\n\t\t    break;\n\t\tcase 9:\n\t\t    result.add(\"Nine\");\n\t\t    break;\n\t\t}\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/106", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n     */\n    public List<Integer> f(int n) {\n", "reference": "        List<Integer> ret = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            if (i % 2 == 0) {\n                int x = 1;\n                for (int j = 1; j <= i; j++) {\n                    x *= j;\n                }\n                ret.add(x);\n            } else {\n                int x = 0;\n                for (int j = 1; j <= i; j++) {\n                    x += j;\n                }\n                ret.add(x);\n            }\n        }\n        return ret;\n    }\n}", "prediction": "//        List<Integer> result = new ArrayList<>();\n//        for (int i = 1; i <= n; i++) {\n//            if (i % 2 == 0) {\n//                result.add(factorial(i));\n//            } else {\n//                result.add(sum(i));\n//            }\n//        }\n//        return result;\n        return IntStream.rangeClosed(1, n)\n               .mapToObj(i -> i % 2 == 0? factorial(i) : sum(i))\n               .collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/107", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n     */\n    public List<Integer> evenOddPalindrome(int n) {\n", "reference": "        int even_palindrome_count = 0, odd_palindrome_count = 0;\n\n        for (int i = 1; i <= n; i++) {\n            if (String.valueOf(i).equals(new StringBuilder(String.valueOf(i)).reverse().toString())) {\n                if (i % 2 == 1) {\n                    odd_palindrome_count += 1;\n                } else {\n                    even_palindrome_count += 1;\n                }\n            }\n        }\n        return Arrays.asList(even_palindrome_count, odd_palindrome_count);\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<>();\n\tint even = 0;\n\tint odd = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t    if (isPalindrome(i)) {\n\t\tif (i % 2 == 0) {\n\t\t    even++;\n\t\t} else {\n\t\t    odd++;\n\t\t}\n\t    }\n\t}\n\tresult.add(even);\n\tresult.add(odd);\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/108", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function countNums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> countNums(Arrays.asList()) == 0\n    >>> countNums(Arrays.asList(-1, 11, -11)) == 1\n    >>> countNums(Arrays.asList(1, 1, 2)) == 3\n     */\n    public int countNums(List<Integer> arr) {\n", "reference": "        int count = 0;\n        for (int n: arr) {\n            int neg = 1;\n            if (n < 0) {\n                n = -n;\n                neg = -1;\n            }\n            List<Integer> digits = new ArrayList<>();\n            for (char digit : String.valueOf(n).toCharArray()) {\n                digits.add(digit - '0');\n            }\n            digits.set(0, digits.get(0) * neg);\n            if (digits.stream().reduce(0, Integer::sum) > 0) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    int sum = 0;\n\t    int num = arr.get(i);\n\t    while (num!= 0) {\n\t\tsum += num % 10;\n\t\tnum /= 10;\n\t    }\n\t    if (sum > 0) {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/109", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing\n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n\n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index.\n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return true else return False.\n    If the given array is empty then return true.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n\n    moveOneBall(Arrays.asList(3, 4, 5, 1, 2))==>true\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    moveOneBall(Arrays.asList(3, 5, 4, 1, 2))==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n     */\n    public boolean moveOneBall(List<Integer> arr) {\n", "reference": "        if (arr.size() == 0) {\n            return true;\n        }\n        List<Integer> sorted_arr = new ArrayList<>(arr);\n        Collections.sort(sorted_arr);\n\n        int min_value = Collections.min(arr);\n        int min_index = arr.indexOf(min_value);\n        List<Integer> my_arr = new ArrayList<>(arr.subList(min_index, arr.size()));\n        my_arr.addAll(arr.subList(0, min_index));\n        for (int i = 0; i < arr.size(); i++) {\n            if (my_arr.get(i) != sorted_arr.get(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tif (arr.size() == 0) {\n\t    return true;\n\t}\n\tint[] arr1 = new int[arr.size()];\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    arr1[i] = arr.get(i);\n\t}\n\tArrays.sort(arr1);\n\tint[] arr2 = new int[arr.size()];\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    arr2[i] = arr.get(i);\n\t}\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    if (arr1[i]!= arr2[i]) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/110", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     */\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n", "reference": "        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}", "prediction": "\t// your code goes here\n\tint odd = 0;\n\tint even = 0;\n\tfor (int i = 0; i < lst1.size(); i++) {\n\t    if (lst1.get(i) % 2 == 0) {\n\t\teven++;\n\t    } else {\n\t\todd++;\n\t    }\n\t}\n\tfor (int i = 0; i < lst2.size(); i++) {\n\t    if (lst2.get(i) % 2 == 0) {\n\t\teven++;\n\t    } else {\n\t\todd++;\n\t    }\n\t}\n\tif (even == lst1.size() && odd == lst2.size()) {\n\t    return \"YES\";\n\t} else {\n\t    return \"NO\";\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/111", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     */\n    public Map<String, Integer> histogram(String test) {\n", "reference": "        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}", "prediction": "\tMap<String, Integer> map = new HashMap<String, Integer>();\n\tString[] words = test.split(\" \");\n\tfor (String word : words) {\n\t    if (map.containsKey(word)) {\n\t\tmap.put(word, map.get(word) + 1);\n\t    } else {\n\t\tmap.put(word, 1);\n\t    }\n\t}\n\treturn map;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/112", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     */\n    public List<Object> reverseDelete(String s, String c) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}", "prediction": "//        String s = \"abcde\";\n//        String c = \"ae\";\n        List<Object> result = new ArrayList<>();\n        String resultString = \"\";\n        boolean isPalindrome = false;\n        for (int i = 0; i < s.length(); i++) {\n            if (!c.contains(s.charAt(i) + \"\")) {\n                resultString += s.charAt(i);\n            }\n        }\n        if (isPalindrome(resultString)) {\n            isPalindrome = true;\n        }\n        result.add(resultString);\n        result.add(isPalindrome);\n        return result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/113", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     */\n    public List<String> oddCount(List<String> lst) {\n", "reference": "        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}", "prediction": "\tList<String> result = new ArrayList<String>();\n\tfor (String s : lst) {\n\t    int oddCount = 0;\n\t    for (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) % 2 == 1) {\n\t\t    oddCount++;\n\t\t}\n\t    }\n\t    result.add(\"the number of odd elements \" + oddCount + \"n the str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\");\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/114", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum(Arrays.asList(2, 3, 4, 1, 2, 4)) == 1\n    minSubArraySum(Arrays.asList(-1, -2, -3)) == -6\n     */\n    public int minSubArraySum(List<Integer> nums) {\n", "reference": "        int minSum = Integer.MAX_VALUE;\n        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n            if (minSum > sum) {\n                minSum = sum;\n            }\n            if (sum > 0) {\n                sum = 0;\n            }\n        }\n        return minSum;\n    }\n}", "prediction": "\tint min = Integer.MAX_VALUE;\n\tint sum = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t    sum += nums.get(i);\n\t    if (sum < min) {\n\t\tmin = sum;\n\t    }\n\t    if (sum > 0) {\n\t\tsum = 0;\n\t    }\n\t}\n\treturn min;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/115", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it,\n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input:\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input:\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n\n    Example 3:\n        Input:\n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n     */\n    public int maxFill(List<List<Integer>> grid, int capacity) {\n", "reference": "        int sum = 0;\n        for (List<Integer> arr : grid) {\n            sum += Math.ceil((double) arr.stream().reduce(Integer::sum).get() / capacity);\n        }\n        return sum;\n    }\n}", "prediction": "\tint rows = grid.size();\n\tint cols = grid.get(0).size();\n\tint[][] dp = new int[rows][cols];\n\tfor (int i = 0; i < rows; i++) {\n\t    for (int j = 0; j < cols; j++) {\n\t\tif (i == 0 && j == 0) {\n\t\t    dp[i][j] = grid.get(i).get(j);\n\t\t} else if (i == 0) {\n\t\t    dp[i][j] = dp[i][j - 1] + grid.get(i).get(j);\n\t\t} else if (j == 0) {\n\t\t    dp[i][j] = dp[i - 1][j] + grid.get(i).get(j);\n\t\t} else {\n\t\t    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + grid.get(i).get(j);\n\t\t}\n\t    }\n\t}\n\tint max = dp[rows - 1][cols - 1];\n\tint count = 0;\n\twhile (max > 0) {\n\t    max -= capacity;\n\t    count++;\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/116", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    <p>\n    It must be implemented like this:\n    >>> sortArray(Arrays.asList(1, 5, 2, 3, 4)).equals(Arrays.asList(1, 2, 3, 4, 5))\n    >>> sortArray(Arrays.asList(-2, -3, -4, -5, -6)).equals(Arrays.asList(-6, -5, -4, -3, -2))\n    >>> sortArray(Arrays.asList(1, 0, 2, 3, 4)).equals(Arrays.asList(0, 1, 2, 3, 4))\n     */\n    public List<Integer> sortArray(List<Integer> arr) {\n", "reference": "                List < Integer > sorted_arr = new ArrayList<>(arr);\n        sorted_arr.sort(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int cnt1 = (int) Integer.toBinaryString(Math.abs(o1)).chars().filter(ch -> ch == '1').count();\n                int cnt2 = (int) Integer.toBinaryString(Math.abs(o2)).chars().filter(ch -> ch == '1').count();\n                if (cnt1 > cnt2) {\n                    return 1;\n                } else if (cnt1 < cnt2) {\n                    return -1;\n                } else {\n                    return o1.compareTo(o2);\n                }\n            }\n        });\n        return sorted_arr;\n    }\n}", "prediction": "//        return arr.stream().sorted(Comparator.comparing(Solution::countOnes).thenComparing(Integer::valueOf)).collect(Collectors.toList());\n        return arr.stream().sorted(Comparator.comparing(Solution::countOnes).thenComparing(Integer::valueOf)).collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/117", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string s and a natural number n, you have been tasked to implement\n    a function that returns a list of all words from string s that contain exactly\n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    selectWords(\"simple white space\", 2) ==> []\n    selectWords(\"Hello world\", 4) ==> [\"world\"]\n    selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n     */\n    public List<String> selectWords(String s, int n) {\n", "reference": "        List<String> result = new ArrayList<>();\n        for (String word : s.split(\" \")) {\n            int n_consonants = 0;\n            for (char c : word.toCharArray()) {\n                c = Character.toLowerCase(c);\n                if (\"aeiou\".indexOf(c) == -1) {\n                    n_consonants += 1;\n                }\n            }\n            if (n_consonants == n) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}", "prediction": "\tList<String> result = new ArrayList<>();\n\tif (s == null || s.length() == 0) {\n\t    return result;\n\t}\n\tString[] words = s.split(\" \");\n\tfor (String word : words) {\n\t    if (word.length() == n) {\n\t\tresult.add(word);\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/118", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    getClosestVowel(\"yogurt\") ==> \"u\"\n    getClosestVowel(\"FULL\") ==> \"U\"\n    getClosestVowel(\"quick\") ==> \"\"\n    getClosestVowel(\"ab\") ==> \"\"\n     */\n    public String getClosestVowel(String word) {\n", "reference": "        if (word.length() < 3) {\n            return \"\";\n        }\n\n        String vowels = \"aeiouAEIOU\";\n        for (int i = word.length() - 2; i > 0; i--) {\n            if (vowels.indexOf(word.charAt(i)) != -1 && vowels.indexOf(word.charAt(i + 1)) == -1 && vowels.indexOf(word.charAt(i - 1)) == -1) {\n                return String.valueOf(word.charAt(i));\n            }\n        }\n        return \"\";\n    }\n}", "prediction": "\tString vowels = \"aeiou\";\n\tint index = word.length() - 1;\n\twhile (index >= 0) {\n\t    if (vowels.contains(word.substring(index, index + 1))) {\n\t\treturn word.substring(index, index + 1);\n\t    }\n\t    index--;\n\t}\n\treturn \"\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/119", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of two strings, both strings consist of open\n    parentheses \"(\" or close parentheses \")\" only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string \"(())()\" is good, while the string\n    \"())\" is not.\n    Return \"Yes\" if there\"s a way to make a good string, and return \"No\" otherwise.\n\n    Examples:\n    matchParens(Arrays.asList(\"()(\", \")\")) == \"Yes\"\n    matchParens(Arrays.asList(\")\", \")\")) == \"No\"\n     */\n    public String matchParens(List<String> lst) {\n", "reference": "        List<String> S = Arrays.asList(lst.get(0) + lst.get(1), lst.get(1) + lst.get(0));\n        for (String s : S) {\n            int val = 0;\n            for (char i : s.toCharArray()) {\n                if (i == '(') {\n                    val += 1;\n                } else {\n                    val -= 1;\n                }\n                if (val < 0) {\n                    break;\n                }\n            }\n            if (val == 0) {\n                return \"Yes\";\n            }\n        }\n        return \"No\";\n    }\n}", "prediction": "\tint open = 0;\n\tint close = 0;\n\tfor (String s : lst) {\n\t    for (int i = 0; i < s.length(); i++) {\n\t\tif (s.charAt(i) == '(') {\n\t\t    open++;\n\t\t} else {\n\t\t    close++;\n\t\t}\n\t    }\n\t}\n\tif (open == close) {\n\t    return \"Yes\";\n\t} else {\n\t    return \"No\";\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/120", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an array arr of integers and a positive integer k, return a sorted list\n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n     */\n    public List<Integer> maximum(List<Integer> arr, int k) {\n", "reference": "        if (k == 0) {\n            return List.of();\n        }\n        List<Integer> arr_sort = new ArrayList<>(arr);\n        Collections.sort(arr_sort);\n        return arr_sort.subList(arr_sort.size() - k, arr_sort.size());\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<>();\n\tPriorityQueue<Integer> pq = new PriorityQueue<>(k, Collections.reverseOrder());\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    pq.add(arr.get(i));\n\t    if (pq.size() > k) {\n\t\tpq.poll();\n\t    }\n\t}\n\twhile (!pq.isEmpty()) {\n\t    result.add(pq.poll());\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/121", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Examples\n    solution(Arrays.asList(5, 8, 7, 1)) ==> 12\n    solution(Arrays.asList(3, 3, 3, 3, 3)) ==> 9\n    solution(Arrays.asList(30, 13, 24, 321)) ==>0\n     */\n    public int solution(List<Integer> lst) {\n", "reference": "        int sum = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            if ((lst.get(i) % 2) == 1) {\n                sum += lst.get(i);\n            }\n        }\n        return sum;\n    }\n}", "prediction": "//        int sum = 0;\n//        for (int i = 0; i < lst.size(); i++) {\n//            if (i % 2 == 0 && lst.get(i) % 2!= 0) {\n//                sum += lst.get(i);\n//            }\n//        }\n//        return sum;\n        return lst.stream().filter(i -> i % 2!= 0 && lst.indexOf(i) % 2 == 0).mapToInt(i -> i).sum();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/122", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n     */\n    public int addElements(List<Integer> arr, int k) {\n", "reference": "        arr = arr.subList(0, k);\n        Optional<Integer> sum = arr.stream().filter(p -> String.valueOf(Math.abs(p)).length() <= 2).reduce(Integer::sum);\n        return sum.orElse(0);\n    }\n}", "prediction": "\tint sum = 0;\n\tfor (int i = 0; i < k; i++) {\n\t    int num = arr.get(i);\n\t    if (num < 10) {\n\t\tsum += num;\n\t    } else if (num < 100) {\n\t\tsum += num % 10;\n\t\tsum += num / 10;\n\t    }\n\t}\n\treturn sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/123", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     */\n    public List<Integer> getOddCollatz(int n) {\n", "reference": "        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n / 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tif (n == 1) {\n\t    result.add(1);\n\t    return result;\n\t}\n\tresult.add(n);\n\twhile (n!= 1) {\n\t    if (n % 2 == 0) {\n\t\tn = n / 2;\n\t    } else {\n\t\tn = 3 * n + 1;\n\t    }\n\t    if (n % 2!= 0) {\n\t\tresult.add(n);\n\t    }\n\t}\n\tCollections.sort(result);\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/124", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06/04/2020\") => false\n     */\n    public boolean validDate(String date) {\n", "reference": "        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}", "prediction": "\tString[] dateArr = date.split(\"-\");\n\tif (dateArr.length!= 3) {\n\t    return false;\n\t}\n\tint month = Integer.parseInt(dateArr[0]);\n\tint day = Integer.parseInt(dateArr[1]);\n\tint year = Integer.parseInt(dateArr[2]);\n\tif (month < 1 || month > 12) {\n\t    return false;\n\t}\n\tif (day < 1 || day > 31) {\n\t    return false;\n\t}\n\tif (month == 2) {\n\t    if (day > 29) {\n\t\treturn false;\n\t    }\n\t}\n\tif (month == 4 || month == 6 || month == 9 || month == 11) {\n\t    if (day > 30) {\n\t\treturn false;\n\t    }\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/125", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     */\n    public Object splitWords(String txt) {\n", "reference": "        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}", "prediction": "//        String[] words = txt.split(\" \");\n//        if (words.length > 1) {\n//            return Arrays.asList(words);\n//        }\n//        String[] words2 = txt.split(\",\");\n//        if (words2.length > 1) {\n//            return Arrays.asList(words2);\n//        }\n//        int count = 0;\n//        for (int i = 0; i < txt.length(); i++) {\n//            if (txt.charAt(i) >= 'a' && txt.charAt(i) <= 'z' && (txt.charAt(i) - 'a') % 2 == 1) {\n//                count++;\n//            }\n//        }\n//        return count;\n        return txt.split(\" \").length > 1? Arrays.asList(txt.split(\" \")) : txt.split(\",\").length > 1? Arrays.asList(txt.split(\",\")) : txt.chars().filter(c -> c >= 'a' && c <= 'z' && (c - 'a') % 2 == 1).count();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/126", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return false. Assume no negative numbers and only integers.\n\n    Examples\n    isSorted(Arrays.asList(5)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5)) -> false\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6)) -> true\n    isSorted(Arrays.asList(1, 2, 3, 4, 5, 6, 7)) -> true\n    isSorted(Arrays.asList(1, 3, 2, 4, 5, 6, 7)) -> false\n    isSorted(Arrays.asList(1, 2, 2, 3, 3, 4)) -> true\n    isSorted(Arrays.asList(1, 2, 2, 2, 3, 4)) -> false\n     */\n    public boolean isSorted(List<Integer> lst) {\n", "reference": "        List<Integer> sorted_lst = new ArrayList<>(lst);\n        Collections.sort(sorted_lst);\n        if (!lst.equals(sorted_lst)) {\n            return false;\n        }\n        for (int i = 0; i < lst.size() - 2; i++) {\n            if (lst.get(i) == lst.get(i + 1) && lst.get(i) == lst.get(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "prediction": "\tint prev = lst.get(0);\n\tfor (int i = 1; i < lst.size(); i++) {\n\t    if (lst.get(i) < prev) {\n\t\treturn false;\n\t    }\n\t    prev = lst.get(i);\n\t}\n\treturn true;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/127", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two\n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n     */\n    public String intersection(List<Integer> interval1, List<Integer> interval2) {\n", "reference": "        int l = Math.max(interval1.get(0), interval2.get(0));\n        int r = Math.min(interval1.get(1), interval2.get(1));\n        int length = r - l;\n        if (length <= 0) {\n            return \"NO\";\n        }\n        if (length == 1) {\n            return \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n}", "prediction": "//        int start1 = interval1.get(0);\n//        int end1 = interval1.get(1);\n//        int start2 = interval2.get(0);\n//        int end2 = interval2.get(1);\n//        if (start1 > end1 || start2 > end2) {\n//            return \"NO\";\n//        }\n//        if (start1 > end2 || start2 > end1) {\n//            return \"NO\";\n//        }\n//        int start = Math.max(start1, start2);\n//        int end = Math.min(end1, end2);\n//        int length = end - start + 1;\n//        if (length <= 1) {\n//            return \"NO\";\n//        }\n//        for (int i = 2; i < length; i++) {\n//            if (length % i == 0) {\n//                return \"NO\";\n//            }\n//        }\n//        return \"YES\";\n        int start1 = interval1.get(0);\n        int end1 = interval1.get(1);\n        int start2 = interval2.get(0);\n        int end2 = interval2.get(1);\n        if (start1 > end1 || start2 > end2) {\n            return \"NO\";\n        }\n        if (start1 > end2 || start2 > end1) {\n            return \"NO\";\n        }\n        int start = Math.max(start1, start2);\n        int end = Math.min(end1, end2);\n        int length = end - start + 1;\n        if (length <= 1) {\n            return \"NO\";\n        }\n        for (int i = 2; i < length; i++) {\n            if (length % i == 0) {\n                return \"NO\";\n            }\n        }\n        return \"YES\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/128", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prodSigns(Arrays.asList(1, 2, 2, -4)) == -9\n    >>> prodSigns(Arrays.asList(0, 1)) == 0\n    >>> prodSigns(Arrays.asList()) == None\n     */\n    public Optional<Integer> prodSigns(List<Integer> arr) {\n", "reference": "        if (arr.size() == 0) {\n            return Optional.empty();\n        }\n        if (arr.contains(0)) {\n            return Optional.of(0);\n        }\n        int prod = (int) (-2 * (arr.stream().filter(p -> p < 0).count() % 2) + 1);\n        return Optional.of(prod * (arr.stream().map(Math::abs).reduce(Integer::sum)).get());\n    }\n}", "prediction": "\tif (arr.isEmpty()) {\n\t    return Optional.empty();\n\t}\n\tint product = 1;\n\tint sum = 0;\n\tfor (int i : arr) {\n\t    if (i == 0) {\n\t\tproduct = 0;\n\t\tbreak;\n\t    }\n\t    product *= Math.signum(i);\n\t    sum += Math.abs(i);\n\t}\n\treturn Optional.of(product * sum);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/129", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     */\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n", "reference": "        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}", "prediction": "\tint n = grid.size();\n\tint[][] dp = new int[n][n];\n\tfor (int i = 0; i < n; i++) {\n\t    for (int j = 0; j < n; j++) {\n\t\tdp[i][j] = Integer.MAX_VALUE;\n\t    }\n\t}\n\tdp[0][0] = grid.get(0).get(0);\n\tfor (int i = 0; i < n; i++) {\n\t    for (int j = 0; j < n; j++) {\n\t\tif (i > 0) {\n\t\t    dp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + grid.get(i).get(j));\n\t\t}\n\t\tif (j > 0) {\n\t\t    dp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + grid.get(i).get(j));\n\t\t}\n\t    }\n\t}\n\tint min = dp[n - 1][n - 1];\n\tList<Integer> res = new ArrayList<>();\n\tif (min > k) {\n\t    return res;\n\t}\n\tint i = n - 1;\n\tint j = n - 1;\n\twhile (i >= 0 && j >= 0) {\n\t    res.add(grid.get(i).get(j));\n\t    if (i > 0 && dp[i - 1][j] + grid.get(i).get(j) == min) {\n\t\ti--;\n\t    } else if (j > 0 && dp[i][j - 1] + grid.get(i).get(j) == min) {\n\t\tj--;\n\t    } else {\n\t\tbreak;\n\t    }\n\t}\n\tCollections.reverse(res);\n\treturn res;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/130", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8\n    You are given a non-negative integer number n, you have to a return a list of the\n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n     */\n    public List<Integer> tri(int n) {\n", "reference": "        if (n == 0) {\n            return List.of(1);\n        }\n        List<Integer> my_tri = new ArrayList<>(Arrays.asList(1, 3));\n        for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                my_tri.add(i / 2 + 1);\n            } else {\n                my_tri.add(my_tri.get(my_tri.size() - 1) + my_tri.get(my_tri.size() - 2) + (i + 3) / 2);\n            }\n        }\n        return my_tri;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tif (n == 0) {\n\t    return result;\n\t}\n\tresult.add(1);\n\tif (n == 1) {\n\t    return result;\n\t}\n\tresult.add(3);\n\tif (n == 2) {\n\t    return result;\n\t}\n\tresult.add(2);\n\tfor (int i = 3; i <= n; i++) {\n\t    if (i % 2 == 0) {\n\t\tresult.add(1 + i / 2);\n\t    } else {\n\t\tresult.add(result.get(i - 2) + result.get(i - 3) + result.get(i - 1));\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/131", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     */\n    public int digits(int n) {\n", "reference": "        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}", "prediction": "\tint result = 1;\n\twhile (n > 0) {\n\t    int digit = n % 10;\n\t    if (digit % 2!= 0) {\n\t\tresult *= digit;\n\t    }\n\t    n /= 10;\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/132", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     */\n    public boolean isNested(String string) {\n", "reference": "        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}", "prediction": "//        if (string.length() == 0) return false;\n//        if (string.length() == 2) return false;\n//        if (string.length() % 2!= 0) return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string.charAt(string.length() - 1) == '[') return false;\n//        if (string.charAt(0) == ']' || string", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/133", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n     */\n    public int sumSquares(List<Double> lst) {\n", "reference": "        return lst.stream().map(p -> (int) Math.ceil(p)).map(p -> p * p).reduce(Integer::sum).get();\n    }\n}", "prediction": "//        int sum = 0;\n//        for (Double d : lst) {\n//            sum += Math.pow(Math.ceil(d), 2);\n//        }\n//        return sum;\n        return lst.stream().mapToInt(d -> (int) Math.pow(Math.ceil(d), 2)).sum();\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/134", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns true if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    checkIfLastCharIsALetter(\"apple pie\") -> false\n    checkIfLastCharIsALetter(\"apple pi e\") -> true\n    checkIfLastCharIsALetter(\"apple pi e \") -> false\n    checkIfLastCharIsALetter(\"\") -> false\n     */\n    public boolean checkIfLastCharIsALetter(String txt) {\n", "reference": "        String[] words = txt.split(\" \", -1);\n        String check = words[words.length - 1];\n        return check.length() == 1 && Character.isLetter(check.charAt(0));\n    }\n}", "prediction": "\tif (txt.length() == 0) {\n\t    return false;\n\t}\n\tif (txt.charAt(txt.length() - 1) =='') {\n\t    return false;\n\t}\n\tif (Character.isLetter(txt.charAt(txt.length() - 1))) {\n\t    return true;\n\t}\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/135", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    canArrange(Arrays.asList(1,2,4,3,5)) = 3\n    canArrange(Arrays.asList(1,2,3)) = -1\n     */\n    public int canArrange(List<Integer> arr) {\n", "reference": "        int ind = -1, i = 1;\n        while (i < arr.size()) {\n            if (arr.get(i) < arr.get(i - 1)) {\n                ind = i;\n            }\n            i += 1;\n        }\n        return ind;\n    }\n}", "prediction": "\tint max = 0;\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    if (arr.get(i) > max) {\n\t\tmax = arr.get(i);\n\t    }\n\t}\n\tint[] arr2 = new int[max + 1];\n\tfor (int i = 0; i < arr.size(); i++) {\n\t    arr2[arr.get(i)]++;\n\t}\n\tfor (int i = 0; i < arr2.length; i++) {\n\t    if (arr2[i] > 1) {\n\t\treturn i;\n\t    }\n\t}\n\treturn -1;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/136", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largestSmallestIntegers(Arrays.asList(2, 4, 1, 3, 5, 7)) == (Optional.empty(), Optional.of(1))\n    largestSmallestIntegers(Arrays.asList()) == (Optional.empty(), Optional.empty())\n    largestSmallestIntegers(Arrays.asList(0)) == (Optional.empty(), Optional.empty())\n     */\n    public List<Optional<Integer>> largestSmallestIntegers(List<Integer> lst){\n", "reference": "        List<Integer> smallest = lst.stream().filter(p -> p < 0).toList();\n        List<Integer> largest = lst.stream().filter(p -> p > 0).toList();\n        Optional<Integer> s = Optional.empty();\n        if (smallest.size() > 0) {\n            s = Optional.of(Collections.max(smallest));\n        }\n        Optional<Integer> l = Optional.empty();\n        if (largest.size() > 0) {\n            l = Optional.of(Collections.min(largest));\n        }\n        return Arrays.asList(s, l);\n    }\n}", "prediction": "//        List<Optional<Integer>> result = new ArrayList<>();\n//        Optional<Integer> max = Optional.empty();\n//        Optional<Integer> min = Optional.empty();\n//        for (Integer i : lst) {\n//            if (i < 0) {\n//                if (max.isPresent()) {\n//                    if (i > max.get()) {\n//                        max = Optional.of(i);\n//                    }\n//                } else {\n//                    max = Optional.of(i);\n//                }\n//            } else {\n//                if (min.isPresent()) {\n//                    if (i < min.get()) {\n//                        min = Optional.of(i);\n//                    }\n//                } else {\n//                    min = Optional.of(i);\n//                }\n//            }\n//        }\n//        result.add(max);\n//        result.add(min);\n//        return result;\n        Optional<Integer> max = Optional.empty();\n        Optional<Integer> min = Optional.empty();\n        for (Integer i : lst) {\n            if (i < 0) {\n                max = max.isPresent()? (i > max.get()? Optional.of(i) : max) : Optional.of(i);\n            } else {\n                min = min.isPresent()? (i < min.get()? Optional.of(i) : min) : Optional.of(i);\n            }\n        }\n        return Arrays.asList(max, min);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/137", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     */\n    public Optional<Object> compareOne(Object a, Object b) {\n", "reference": "        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}", "prediction": "//        if (a instanceof Integer && b instanceof Integer) {\n//            if ((Integer) a > (Integer) b) {\n//                return Optional.of(a);\n//            } else if ((Integer) a < (Integer) b) {\n//                return Optional.of(b);\n//            } else {\n//                return Optional.empty();\n//            }\n//        } else if (a instanceof Float && b instanceof Float) {\n//            if ((Float) a > (Float) b) {\n//                return Optional.of(a);\n//            } else if ((Float) a < (Float) b) {\n//                return Optional.of(b);\n//            } else {\n//                return Optional.empty();\n//            }\n//        } else if (a instanceof String && b instanceof String) {\n//            if (Float.parseFloat((String) a) > Float.parseFloat((String) b)) {\n//                return Optional.of(a);\n//            } else if (Float.parseFloat((String) a) < Float.parseFloat((String) b)) {\n//                return Optional.of(b);\n//            } else {\n//                return Optional.empty();\n//            }\n//        } else {\n//            return Optional.empty();\n//        }\n        if (a instanceof Integer && b instanceof Integer) {\n            return Optional.of((Integer) a > (Integer) b? a : b);\n        } else if (a instanceof Float && b instanceof Float) {\n            return Optional.of((Float) a > (Float) b? a : b);\n        } else if (a instanceof String && b instanceof String) {\n            return Optional.of(Float.parseFloat((String) a) > Float.parseFloat((String) b)? a : b);\n        } else {\n            return Optional.empty();\n        }\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/138", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    isEqualToSumEven(4) == false\n    isEqualToSumEven(6) == false\n    isEqualToSumEven(8) == true\n     */\n    public boolean isEqualToSumEven(int n) {\n", "reference": "        return n % 2 == 0 && n >= 8;\n    }\n}", "prediction": "\tif (n % 2!= 0) {\n\t    return false;\n\t}\n\tfor (int i = 2; i < n; i += 2) {\n\t    for (int j = 2; j < n; j += 2) {\n\t\tfor (int k = 2; k < n; k += 2) {\n\t\t    for (int l = 2; l < n; l += 2) {\n\t\t\tif (i + j + k + l == n) {\n\t\t\t    return true;\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n\treturn false;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/139", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     */\n    public long specialFactorial(int n) {\n", "reference": "        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}", "prediction": "\tlong result = 1;\n\tfor (int i = n; i > 0; i--) {\n\t    result *= factorial(i);\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/140", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     */\n    public String fixSpaces(String text) {\n", "reference": "        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}", "prediction": "//        String[] words = text.split(\" \");\n//        StringBuilder sb = new StringBuilder();\n//        for (String word : words) {\n//            sb.append(word);\n//            sb.append(\" \");\n//        }\n//        return sb.toString().trim().replaceAll(\" +\", \"_\");\n        return text.trim().replaceAll(\" +\", \"_\");\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/141", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Create a function which takes a string representing a file's name, and returns\n    \"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: [\"txt\", \"exe\", \"dll\"]\n    Examples:\n    file_name_check(\"example.txt\") # => \"Yes\"\n    file_name_check(\"1example.dll\") # => \"No\" (the name should start with a latin alphapet letter)\n     */\n    public String filenameCheck(String file_name) {\n", "reference": "        List<String> suf = Arrays.asList(\"txt\", \"exe\", \"dll\");\n        String[] lst = file_name.split(\"\\\\.\" );\n        if (lst.length != 2 || !suf.contains(lst[1]) || lst[0].isEmpty() || !Character.isLetter(lst[0].charAt(0))) {\n            return \"No\";\n        }\n        int t = (int) lst[0].chars().map(x -> (char) x).filter(Character::isDigit).count();\n        if (t > 3) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }\n}", "prediction": "//        String[] arr = file_name.split(\"\\\\.\");\n//        String[] arr2 = arr[0].split(\"\");\n//        String[] arr3 = arr[1].split(\"\");\n//        int count = 0;\n//        for (int i = 0; i < arr2.length; i++) {\n//            if (arr2[i].matches(\"[0-9]\")) {\n//                count++;\n//            }\n//        }\n//        if (count > 3) {\n//            return \"No\";\n//        }\n//        if (arr2[0].matches(\"[a-zA-Z]\")) {\n//            return \"No\";\n//        }\n//        if (arr3[0].matches(\"[txt, exe, dll]\")) {\n//            return \"No\";\n//        }\n//        return \"Yes\";\n        String[] arr = file_name.split(\"\\\\.\");\n        String[] arr2 = arr[0].split(\"\");\n        String[] arr3 = arr[1].split(\"\");\n        int count = 0;\n        for (int i = 0; i < arr2.length; i++) {\n            if (arr2[i].matches(\"[0-9]\")) {\n                count++;\n            }\n        }\n        if (count > 3) {\n            return \"No\";\n        }\n        if (arr2[0].matches(\"[a-zA-Z]\")) {\n            return \"No\";\n        }\n        if (arr3[0].matches(\"[txt, exe, dll]\")) {\n            return \"No\";\n        }\n        return \"Yes\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/142", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\n\n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n     */\n    public int sumSquares(List<Integer> lst) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i++) {\n            if (i % 3 == 0) {\n                result.add(lst.get(i) * lst.get(i));\n            } else if (i % 4 == 0) {\n                result.add((int) Math.pow(lst.get(i), 3));\n            } else {\n                result.add(lst.get(i));\n            }\n        }\n        return result.stream().reduce(Integer::sum).orElse(0);\n    }\n}", "prediction": "\tint sum = 0;\n\tfor (int i = 0; i < lst.size(); i++) {\n\t    if (i % 3 == 0) {\n\t\tlst.set(i, lst.get(i) * lst.get(i));\n\t    }\n\t    if (i % 4 == 0 && i % 3!= 0) {\n\t\tlst.set(i, lst.get(i) * lst.get(i) * lst.get(i));\n\t    }\n\t    sum += lst.get(i);\n\t}\n\treturn sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/143", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     */\n    public String wordsInSentence(String sentence) {\n", "reference": "        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}", "prediction": "//        String[] words = sentence.split(\" \");\n//        StringBuilder sb = new StringBuilder();\n//        for (String word : words) {\n//            if (isPrime(word.length())) {\n//                sb.append(word).append(\" \");\n//            }\n//        }\n//        return sb.toString().trim();\n        return Arrays.stream(sentence.split(\" \"))\n               .filter(word -> isPrime(word.length()))\n               .collect(Collectors.joining(\" \"));\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/144", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = true\n    simplify(\"1/6\", \"2/1\") = false\n    simplify(\"7/10\", \"10/2\") = false\n     */\n    public boolean simplify(String x, String n) {\n", "reference": "        String[] a = x.split(\"/\");\n        String[] b = n.split(\"/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator / denom * denom == numerator;\n    }\n}", "prediction": "\tString[] xArr = x.split(\"/\");\n\tString[] nArr = n.split(\"/\");\n\tint xNum = Integer.parseInt(xArr[0]);\n\tint xDen = Integer.parseInt(xArr[1]);\n\tint nNum = Integer.parseInt(nArr[0]);\n\tint nDen = Integer.parseInt(nArr[1]);\n\tint gcd = gcd(xDen, nDen);\n\treturn (nNum * xDen) % gcd == 0 && (xNum * nDen) % gcd == 0;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/145", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> orderByPoints(Arrays.asList(1, 11, -1, -11, -12)) == [-1, -11, 1, -12, 11]\n    >>> orderByPoints(Arrays.asList()) == []\n     */\n    public List<Integer> orderByPoints(List<Integer> nums) {\n", "reference": "        List<Integer> result = new ArrayList<>(nums);\n        result.sort((o1, o2) -> {\n            int sum1 = 0;\n            int sum2 = 0;\n\n            for (int i = 0; i < String.valueOf(o1).length(); i++) {\n                if (i != 0 || o1 >= 0) {\n                    sum1 += (String.valueOf(o1).charAt(i) - '0' );\n                    if (i == 1 && o1 < 0) {\n                        sum1 = -sum1;\n                    }\n                }\n            }\n            for (int i = 0; i < String.valueOf(o2).length(); i++) {\n                if (i != 0 || o2 >= 0) {\n                    sum2 += (String.valueOf(o2).charAt(i) - '0' );\n                    if (i == 1 && o2 < 0) {\n                        sum2 = -sum2;\n                    }\n                }\n            }\n            return Integer.compare(sum1, sum2);\n        });\n        return result;\n    }\n}", "prediction": "//        List<Integer> result = new ArrayList<>();\n//        if (nums == null || nums.size() == 0) {\n//            return result;\n//        }\n//        Map<Integer, List<Integer>> map = new HashMap<>();\n//        for (int i = 0; i < nums.size(); i++) {\n//            int sum = 0;\n//            int num = nums.get(i);\n//            while (num!= 0) {\n//                sum += num % 10;\n//                num /= 10;\n//            }\n//            if (!map.containsKey(sum)) {\n//                map.put(sum, new ArrayList<>());\n//            }\n//            map.get(sum).add(nums.get(i));\n//        }\n//        List<Integer> keys = new ArrayList<>(map.keySet());\n//        Collections.sort(keys);\n//        for (int key : keys) {\n//            List<Integer> list = map.get(key);\n//            Collections.sort(list);\n//            result.addAll(list);\n//        }\n//        return result;\n        if (nums == null || nums.size() == 0) {\n            return nums;\n        }\n        Collections.sort(nums, new Comparator<Integer>() {\n            @Override\n            public int compare(Integer o1, Integer o2) {\n                int sum1 = 0;\n                int sum2 = 0;\n                int num1 = o1;\n                int num2 = o2;\n                while (num1!= 0) {\n                    sum1 += num1 % 10;\n                    num1 /= 10;\n                }\n                while (num2!= 0) {\n                    sum2 += num2 % 10;\n                    num2 /= 10;\n                }\n                if (sum1!= sum2) {\n                    return sum1 - sum2;\n                } else {\n                    return o1 - o2;\n                }\n            }\n        });\n        return nums;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/146", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that takes an array of numbers as input and returns\n    the number of elements in the array that are greater than 10 and both\n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter(Arrays.asList(15, -73, 14, -15)) => 1\n    specialFilter(Arrays.asList(33, -2, -3, 45, 21, 109)) => 2\n     */\n    public int specialFilter(List<Integer> nums) {\n", "reference": "        int count = 0;\n        for (int num : nums) {\n            if (num > 10) {\n                String odd_digits = \"13579\";\n                String number_as_string = String.valueOf(num);\n                if (odd_digits.indexOf(number_as_string.charAt(0)) != -1 && odd_digits.indexOf(number_as_string.charAt(number_as_string.length() - 1)) != -1) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}", "prediction": "\tint count = 0;\n\tfor (int i = 0; i < nums.size(); i++) {\n\t    if (nums.get(i) > 10 && nums.get(i) % 2 == 1 && nums.get(i) / 10 % 2 == 1) {\n\t\tcount++;\n\t    }\n\t}\n\treturn count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/147", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 <= i <= n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k,\n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation:\n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n     */\n    public int getMaxTriples(int n) {\n", "reference": "        List<Integer> A = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            A.add(i * i - i + 1);\n        }\n        int count = 0;\n        for (int i = 0; i < A.size(); i++) {\n            for (int j = i + 1; j < A.size(); j++) {\n                for (int k = j + 1; k < A.size(); k++) {\n                    if ((A.get(i) + A.get(j) + A.get(k)) % 3 == 0) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return count;\n    }\n}", "prediction": "//        int[] a = new int[n];\n//        for (int i = 0; i < n; i++) {\n//            a[i] = i * i - i + 1;\n//        }\n//        int count = 0;\n//        for (int i = 0; i < n - 2; i++) {\n//            for (int j = i + 1; j < n - 1; j++) {\n//                for (int k = j + 1; k < n; k++) {\n//                    if ((a[i] + a[j] + a[k]) % 3 == 0) {\n//                        count++;\n//                    }\n//                }\n//            }\n//        }\n//        return count;\n        int count = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                for (int k = j + 1; k <= n; k++) {\n                    if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/148", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     */\n    public List<String> bf(String planet1, String planet2) {\n", "reference": "        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}", "prediction": "\tList<String> planets = new ArrayList<String>();\n\tplanets.add(\"Mercury\");\n\tplanets.add(\"Venus\");\n\tplanets.add(\"Earth\");\n\tplanets.add(\"Mars\");\n\tplanets.add(\"Jupiter\");\n\tplanets.add(\"Saturn\");\n\tplanets.add(\"Uranus\");\n\tplanets.add(\"Neptune\");\n\tint index1 = planets.indexOf(planet1);\n\tint index2 = planets.indexOf(planet2);\n\tif (index1 == -1 || index2 == -1) {\n\t    return new ArrayList<String>();\n\t}\n\tif (index1 > index2) {\n\t    int temp = index1;\n\t    index1 = index2;\n\t    index2 = temp;\n\t}\n\treturn planets.subList(index1 + 1, index2);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/149", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert listSort(Arrays.asList(\"aa\", \"a\", \"aaa\")) => [\"aa\"]\n    assert listSort(Arrays.asList(\"ab\", \"a\", \"aaa\", \"cd\")) => [\"ab\", \"cd\"]\n     */\n    public List<String> listSort(List<String> lst) {\n", "reference": "        List<String> lst_sorted = new ArrayList<>(lst);\n        Collections.sort(lst_sorted);\n        List<String> new_lst = new ArrayList<>();\n        for (String i : lst_sorted) {\n            if (i.length() % 2 == 0) {\n                new_lst.add(i);\n            }\n        }\n        new_lst.sort(Comparator.comparingInt(String::length));\n        return new_lst;\n    }\n}", "prediction": "//        List<String> result = new ArrayList<>();\n//        for (String s : lst) {\n//            if (s.length() % 2 == 0) {\n//                result.add(s);\n//            }\n//        }\n//        Collections.sort(result);\n//        return result;\n        return lst.stream()\n               .filter(s -> s.length() % 2 == 0)\n               .sorted()\n               .collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/150", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     */\n    public int xOrY(int n, int x, int y) {\n", "reference": "        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}", "prediction": "\tif (isPrime(n)) {\n\t    return x;\n\t} else {\n\t    return y;\n\t}\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/151", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    doubleTheDifference(Arrays.asList(1, 3, 2, 0)) == 1 + 9 + 0 + 0 = 10\n    doubleTheDifference(Arrays.asList(-1, -2, 0)) == 0\n    doubleTheDifference(Arrays.asList(9, -2)) == 81\n    doubleTheDifference(Arrays.asList(0)) == 0\n\n    If the input list is empty, return 0.\n     */\n    public int doubleTheDifference(List<Object> lst) {\n", "reference": "        return lst.stream().filter(i -> i instanceof Integer p && p > 0 && p % 2 != 0).map(i -> (Integer) i * (Integer) i).reduce(Integer::sum).orElse(0);\n    }\n}", "prediction": "\tint sum = 0;\n\tfor (Object o : lst) {\n\t    if (o instanceof Integer) {\n\t\tint i = (Integer) o;\n\t\tif (i % 2 == 1) {\n\t\t    sum += i * i;\n\t\t}\n\t    }\n\t}\n\treturn sum;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/152", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     */\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n", "reference": "        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}", "prediction": "//        List<Integer> result = new ArrayList<>();\n//        for (int i = 0; i < game.size(); i++) {\n//            result.add(Math.abs(game.get(i) - guess.get(i)));\n//        }\n//        return result;\n        return IntStream.range(0, game.size())\n               .map(i -> Math.abs(game.get(i) - guess.get(i)))\n               .boxed()\n               .collect(Collectors.toList());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/153", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     */\n    public String StrongestExtension(String class_name, List<String> extensions) {\n", "reference": "        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}", "prediction": "\tint max = Integer.MIN_VALUE;\n\tString result = \"\";\n\tfor (String s : extensions) {\n\t    int cap = 0;\n\t    int sm = 0;\n\t    for (int i = 0; i < s.length(); i++) {\n\t\tif (Character.isUpperCase(s.charAt(i))) {\n\t\t    cap++;\n\t\t} else {\n\t\t    sm++;\n\t\t}\n\t    }\n\t    int strength = cap - sm;\n\t    if (strength > max) {\n\t\tmax = strength;\n\t\tresult = class_name + \".\" + s;\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/154", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     */\n    public boolean cycpatternCheck(String a, String b) {\n", "reference": "        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}", "prediction": "\t// your code goes here\n\tif(a.length() < b.length())\n\t    return false;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aaa = 0;\n\tint bbb = 0;\n\tint ccc = 0;\n\tint ddd = 0;\n\tint eee = 0;\n\tint fff = 0;\n\tint ggg = 0;\n\tint hhh = 0;\n\tint iii = 0;\n\tint jjj = 0;\n\tint kkk = 0;\n\tint lll = 0;\n\tint mmm = 0;\n\tint nnn = 0;\n\tint ooo = 0;\n\tint ppp = 0;\n\tint qqq = 0;\n\tint rrr = 0;\n\tint sss = 0;\n\tint ttt = 0;\n\tint uuu = 0;\n\tint vvv = 0;\n\tint www = 0;\n\tint xxx = 0;\n\tint yyy = 0;\n\tint zzz = 0;\n\tint aaaa = 0;\n\tint bbbb = 0;\n\tint cccc = 0;\n\tint dddd = 0;\n\tint eeee = 0;\n\tint ffff = 0;\n\tint gggg = 0;\n\tint hhhh = 0;\n\tint iiii = 0;\n\tint jjjj = 0;\n\tint kkkk = 0;\n\tint llll = 0;\n\tint mmmm = 0;\n\tint nnnn = 0;\n\tint oooo = 0;\n\tint pppp = 0;\n\tint qqqq = 0;\n\tint rrrr = 0;\n\tint ssss = 0;\n\tint tttt = 0;\n\tint uuuu = 0;\n\tint vvvv = 0;\n\tint wwww = 0;\n\tint xxxx = 0;\n\tint yyyy = 0;\n\tint zzzz = 0;\n\tint aaaaa = 0;\n\tint bbbbb = 0;\n\tint ccccc = 0;\n\tint ddddd = 0;\n\tint eeeee = 0;\n\tint fffff = 0;\n\tint ggggg = 0;\n\tint hhhhh = 0;\n\tint iiiii = 0;\n\tint jjjjj = 0;\n\tint kkkkk = 0;\n\tint lllll = 0;\n\tint mmmmm = 0;\n\tint nnnnn = 0;\n\tint ooooo = 0;\n\tint ppppp = 0;\n\tint qqqqq = 0;\n\tint rrrrr = 0;\n\tint sssss = 0;\n\tint ttttt = 0;\n\tint uuuuu = 0;\n\tint vvvvv = 0;\n\tint wwwww = 0;\n\tint xxxxx = 0;\n\tint yyyyy = 0;\n\tint zzzzz = 0;\n\tint aaaaaa = 0;\n\tint bbbbbb = 0;\n\tint cccccc = 0;\n\tint dddddd = 0;\n\tint eeeeee = 0;\n\tint ffffff = 0;\n\tint gggggg = 0;\n\tint hhhhhh = 0;\n\tint iiiiii = 0;\n\tint jjjjjj = 0;\n\tint kkkkkk = 0;\n\tint llllll = 0;\n\tint mmmmmm = 0;\n\tint nnnnnn = 0;\n\tint oooooo = 0;\n\tint pppppp = 0;\n\tint qqqqqq = 0;\n\tint rrrrrr = 0;\n\tint ssssss = 0;\n\tint tttttt = 0;\n\tint uuuuuu = 0;\n\tint vvvvvv = 0;\n\tint wwwwww = 0;\n\tint xxxxxx = 0;\n\tint yyyyyy = 0;\n\tint zzzzzz = 0;\n\tint aaaaaaa = 0;\n\tint bbbbbbb = 0;\n\tint ccccccc = 0;\n\tint ddddddd = 0;\n\tint eeeeeee = 0;\n\tint fffffff = 0;\n\tint ggggggg = 0;\n\tint hhhhhhh = 0;\n\tint iiiiiii = 0;\n\tint jjjjjjj = 0;\n\tint kkkkkkk = 0;\n\tint lllllll = 0;\n\tint mmmmmmm = 0;\n\tint nnnnnnn = 0;\n\tint ooooooo = 0;\n\tint ppppppp = 0;\n\tint qqqqqqq = 0;\n\tint rrrrrrr = 0;\n\tint sssssss = 0;\n\tint ttttttt = 0;\n\tint uuuuuuu = 0;\n\tint vvvvvvv = 0;\n\tint wwwwwww = 0;\n\tint xxxxxxx = 0;\n\tint yyyyyyy = 0;\n\tint zzzzzzz = 0;\n\tint aaaaaaaa = 0;\n\tint bbbbbbbb = 0;\n\tint cccccccc = 0;\n\tint dddddddd = 0;\n\tint eeeeeeee = 0;\n\tint ffffffff = 0;\n\tint gggggggg = 0;\n\tint hhhhhhhh = 0;\n\tint iiiiiiii = 0;\n\tint jjjjjjjj = 0;\n\tint kkkkkkkk = 0;\n\tint llllllll = 0;\n\tint mmmmmmmm = 0;\n\tint nnnnnnnn = 0;\n\tint ooooooooo = 0;\n\tint pppppppp = 0;\n\tint qqqqqqqq = 0;\n\tint rrrrrrrr = 0;\n\tint ssssssss = 0;\n\tint tttttttt = 0;\n\tint uuuuuuuu = 0;\n\tint vvvvvvvv = 0;\n\tint www", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/155", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given an integer. return a tuple that has the number of even and odd digits respectively.\n    \n     Example:\n        evenOddCount(-12) ==> (1, 1)\n        evenOddCount(123) ==> (1, 2)\n     */\n    public List<Integer> evenOddCount(int num) {\n", "reference": "        int even_count = 0, odd_count = 0;\n        for (char i : String.valueOf(Math.abs(num)).toCharArray()) {\n            if ((i - '0') % 2 == 0) {\n                even_count += 1;\n            } else {\n                odd_count += 1;\n            }\n        }\n        return Arrays.asList(even_count, odd_count);\n    }\n}", "prediction": "\tint even = 0;\n\tint odd = 0;\n\tint temp = num;\n\tif(num < 0) {\n\t    temp = num * -1;\n\t}\n\twhile(temp > 0) {\n\t    if(temp % 2 == 0) {\n\t\teven++;\n\t    } else {\n\t\todd++;\n\t    }\n\t    temp = temp / 10;\n\t}\n\tList<Integer> result = new ArrayList<Integer>();\n\tresult.add(even);\n\tresult.add(odd);\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/156", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     */\n    public String intToMiniRoman(int number) {\n", "reference": "        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number / num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}", "prediction": "\t// TODO: Implement this method\n\treturn \"\";\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/157", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     */\n    public boolean rightAngleTriangle(int a, int b, int c) {\n", "reference": "        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}", "prediction": "\tint[] arr = {a, b, c};\n\tArrays.sort(arr);\n\treturn arr[0] * arr[0] + arr[1] * arr[1] == arr[2] * arr[2];\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/158", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n     */\n    public String findMax(List<String> words) {\n", "reference": "        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}", "prediction": "\t// Write your code here\n\tString max = \"\";\n\tint maxCount = 0;\n\tfor (String word : words) {\n\t    int count = 0;\n\t    Set<Character> set = new HashSet<>();\n\t    for (int i = 0; i < word.length(); i++) {\n\t\tset.add(word.charAt(i));\n\t    }\n\t    if (set.size() > maxCount) {\n\t\tmaxCount = set.size();\n\t\tmax = word;\n\t    } else if (set.size() == maxCount) {\n\t\tif (word.compareTo(max) < 0) {\n\t\t    max = word;\n\t\t}\n\t    }\n\t}\n\treturn max;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/159", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n\n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n\n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n     */\n    public List<Integer> eat(int number, int need, int remaining) {\n", "reference": "        if (need <= remaining) {\n            return Arrays.asList(number + need, remaining - need);\n        } else {\n            return Arrays.asList(number + remaining, 0);\n        }\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tint total = number + remaining;\n\tif (total >= need) {\n\t    result.add(need);\n\t    result.add(total - need);\n\t} else {\n\t    result.add(total);\n\t    result.add(0);\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/160", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two lists operator, and operand. The first list has basic algebra operations, and\n    the second list is a list of integers. Use the two given lists to build the algebric\n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + )\n    Subtraction ( - )\n    Multiplication ( * )\n    Floor division ( / )\n    Exponentiation ( ** )\n\n    Example:\n    operator[\"+\", \"*\", \"-\"]\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n     */\n    public int doAlgebra(List<String> operator, List<Integer> operand) {\n", "reference": "        List<String> ops = new ArrayList<>(operator);\n        List<Integer> nums = new ArrayList<>(operand);\n        for (int i = ops.size() - 1; i >= 0; i--) {\n            if (ops.get(i).equals(\"**\")) {\n                nums.set(i, (int) Math.round(Math.pow(nums.get(i), nums.get(i + 1))));\n                nums.remove(i + 1);\n                ops.remove(i);\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"*\")) {\n                nums.set(i, nums.get(i) * nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"/\")) {\n                nums.set(i, nums.get(i) / nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        for (int i = 0; i < ops.size(); i++) {\n            if (ops.get(i).equals(\"+\")) {\n                nums.set(i, nums.get(i) + nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            } else if (ops.get(i).equals(\"-\")) {\n                nums.set(i, nums.get(i) - nums.get(i + 1));\n                nums.remove(i + 1);\n                ops.remove(i);\n                i--;\n            }\n        }\n        return nums.get(0);\n    }\n}", "prediction": "\t// Write your code here\n\tint result = 0;\n\tint i = 0;\n\tint j = 0;\n\tint k = 0;\n\tint l = 0;\n\tint m = 0;\n\tint n = 0;\n\tint o = 0;\n\tint p = 0;\n\tint q = 0;\n\tint r = 0;\n\tint s = 0;\n\tint t = 0;\n\tint u = 0;\n\tint v = 0;\n\tint w = 0;\n\tint x = 0;\n\tint y = 0;\n\tint z = 0;\n\tint a = 0;\n\tint b = 0;\n\tint c = 0;\n\tint d = 0;\n\tint e = 0;\n\tint f = 0;\n\tint g = 0;\n\tint h = 0;\n\tint ii = 0;\n\tint jj = 0;\n\tint kk = 0;\n\tint ll = 0;\n\tint mm = 0;\n\tint nn = 0;\n\tint oo = 0;\n\tint pp = 0;\n\tint qq = 0;\n\tint rr = 0;\n\tint ss = 0;\n\tint tt = 0;\n\tint uu = 0;\n\tint vv = 0;\n\tint ww = 0;\n\tint xx = 0;\n\tint yy = 0;\n\tint zz = 0;\n\tint aa = 0;\n\tint bb = 0;\n\tint cc = 0;\n\tint dd = 0;\n\tint ee = 0;\n\tint ff = 0;\n\tint gg = 0;\n\tint hh = 0;\n\tint ii1 = 0;\n\tint jj1 = 0;\n\tint kk1 = 0;\n\tint ll1 = 0;\n\tint mm1 = 0;\n\tint nn1 = 0;\n\tint oo1 = 0;\n\tint pp1 = 0;\n\tint qq1 = 0;\n\tint rr1 = 0;\n\tint ss1 = 0;\n\tint tt1 = 0;\n\tint uu1 = 0;\n\tint vv1 = 0;\n\tint ww1 = 0;\n\tint xx1 = 0;\n\tint yy1 = 0;\n\tint zz1 = 0;\n\tint aa1 = 0;\n\tint bb1 = 0;\n\tint cc1 = 0;\n\tint dd1 = 0;\n\tint ee1 = 0;\n\tint ff1 = 0;\n\tint gg1 = 0;\n\tint hh1 = 0;\n\tint ii2 = 0;\n\tint jj2 = 0;\n\tint kk2 = 0;\n\tint ll2 = 0;\n\tint mm2 = 0;\n\tint nn2 = 0;\n\tint oo2 = 0;\n\tint pp2 = 0;\n\tint qq2 = 0;\n\tint rr2 = 0;\n\tint ss2 = 0;\n\tint tt2 = 0;\n\tint uu2 = 0;\n\tint vv2 = 0;\n\tint ww2 = 0;\n\tint xx2 = 0;\n\tint yy2 = 0;\n\tint zz2 = 0;\n\tint aa2 = 0;\n\tint bb2 = 0;\n\tint cc2 = 0;\n\tint dd2 = 0;\n\tint ee2 = 0;\n\tint ff2 = 0;\n\tint gg2 = 0;\n\tint hh2 = 0;\n\tint ii3 = 0;\n\tint jj3 = 0;\n\tint kk3 = 0;\n\tint ll3 = 0;\n\tint mm3 = 0;\n\tint nn3 = 0;\n\tint oo3 = 0;\n\tint pp3 = 0;\n\tint qq3 = 0;\n\tint rr3 = 0;\n\tint ss3 = 0;\n\tint tt3 = 0;\n\tint uu3 = 0;\n\tint vv3 = 0;\n\tint ww3 = 0;\n\tint xx3 = 0;\n\tint yy3 = 0;\n\tint zz3 = 0;\n\tint aa3 = 0;\n\tint bb3 = 0;\n\tint cc3 = 0;\n\tint dd3 = 0;\n\tint ee3 = 0;\n\tint ff3 = 0;\n\tint gg3 = 0;\n\tint hh3 = 0;\n\tint ii4 = 0;\n\tint jj4 = 0;\n\tint kk4 = 0;\n\tint ll4 = 0;\n\tint mm4 = 0;\n\tint nn4 = 0;\n\tint oo4 = 0;\n\tint pp4 = 0;\n\tint qq4 = 0;\n\tint rr4 = 0;\n\tint ss4 = 0;\n\tint tt4 = 0;\n\tint uu4 = 0;\n\tint vv4 = 0;\n\tint ww4 = 0;\n\tint xx4 = 0;\n\tint yy4 = 0;\n\tint zz4 = 0;\n\tint aa4 = 0;\n\tint bb4 = 0;\n\tint cc4 = 0;\n\tint dd4 = 0;\n\tint ee4 = 0;\n\tint ff4 = 0;\n\tint gg4 = 0;\n\tint hh4 = 0;\n\tint ii5 = 0;\n\tint jj5 = 0;\n\tint kk5 = 0;\n\tint ll5 = 0;\n\tint mm5 = 0;\n\tint nn5 = 0;\n\tint oo5 = 0;\n\tint pp5 = 0;\n\tint qq5 = 0;\n\tint rr5 = 0;\n\tint ss5 = 0;\n\tint tt5 = 0;\n\tint uu5 = 0;\n\tint vv5 = 0;\n\tint ww5 = 0;\n\tint xx5 = 0;\n\tint yy5 = 0;\n\tint zz5 = 0;\n\tint aa5 = 0;\n\tint bb5 = 0;\n\tint cc5 = 0;\n\tint dd5 = 0;\n\tint ee5 = 0;\n\tint ff5 = 0;\n\tint gg5 = 0;\n\tint hh5 = 0;\n\tint ii6 = 0;\n\tint jj6 = 0;\n\tint kk6 = 0;\n\tint ll6 = 0;\n\tint mm6 = 0;\n\tint nn6 = 0;\n\tint oo6 = 0;\n\tint pp6 = 0;\n\tint qq6 = 0;\n\tint rr6 = 0;\n\tint ss6 = 0;\n\tint tt6 = 0;\n\tint uu6 = 0;\n\tint vv6 = 0;\n\tint ww6 = 0;\n\tint xx6 = 0;\n\tint yy6 = 0;\n\tint zz6 = 0;\n\tint aa6 = 0;\n\tint bb6 = 0;\n\tint cc6 = 0;\n\tint dd6 = 0;\n\tint ee6 = 0;\n\tint ff", "finish_reason": "length", "meta": {"subset": "java"}}
{"id": "Java/161", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     */\n    public String solve(String s) {\n", "reference": "        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}", "prediction": "//        String result = \"\";\n//        for (int i = 0; i < s.length(); i++) {\n//            if (Character.isLetter(s.charAt(i))) {\n//                if (Character.isUpperCase(s.charAt(i))) {\n//                    result += Character.toLowerCase(s.charAt(i));\n//                } else {\n//                    result += Character.toUpperCase(s.charAt(i));\n//                }\n//            } else {\n//                result += s.charAt(i);\n//            }\n//        }\n//        return result;\n        return s.replaceAll(\"[a-zA-Z]\", x -> x.equals(x.toLowerCase())? x.toUpperCase() : x.toLowerCase());\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/162", "part": [1, 1], "seq": [1, 1], "prompt": "import java.math.BigInteger;\nimport java.security.*;\nimport java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given a string \"text\", return its md5 hash equivalent string with length being 32.\n    If \"text\" is an empty string, return Optional.empty().\n    \n    >>> stringToMd5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n     */\n    public Optional<String> stringToMd5(String text) throws NoSuchAlgorithmException {\n", "reference": "        if (text.isEmpty()) {\n            return Optional.empty();\n        }\n\n        String md5 = new BigInteger(1, java.security.MessageDigest.getInstance(\"MD5\").digest(text.getBytes())).toString(16);\n        md5 = \"0\".repeat(32 - md5.length()) + md5;\n        return Optional.of(md5);\n    }\n}", "prediction": "\tif (text.length() == 0) {\n\t    return Optional.empty();\n\t}\n\tMessageDigest md = MessageDigest.getInstance(\"MD5\");\n\tmd.update(text.getBytes());\n\tbyte[] digest = md.digest();\n\tBigInteger bigInt = new BigInteger(1, digest);\n\tString hashtext = bigInt.toString(16);\n\twhile (hashtext.length() < 32) {\n\t    hashtext = \"0\" + hashtext;\n\t}\n\treturn Optional.of(hashtext);\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
{"id": "Java/163", "part": [1, 1], "seq": [1, 1], "prompt": "import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    /**\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generateIntegers(2, 8) => [2, 4, 6, 8]\n    generateIntegers(8, 2) => [2, 4, 6, 8]\n    generateIntegers(10, 14) => []\n     */\n    public List<Integer> generateIntegers(int a, int b) {\n", "reference": "        int lower = Math.max(2, Math.min(a, b));\n        int upper = Math.min(8, Math.max(a, b));\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = lower; i <= upper; i += 2) {\n            result.add(i);\n        }\n        return result;\n    }\n}", "prediction": "\tList<Integer> result = new ArrayList<Integer>();\n\tint start = Math.min(a, b);\n\tint end = Math.max(a, b);\n\tfor (int i = start; i <= end; i++) {\n\t    if (i % 2 == 0) {\n\t\tresult.add(i);\n\t    }\n\t}\n\treturn result;\n    }", "finish_reason": "brace_matching", "meta": {"subset": "java"}}
