{"id":"Java\/11","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> stringXor(\"010\", \"110\")\n    \"100\"\n     *\/\n    public String stringXor(String a, String b) {\n","reference":"        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < a.length(); i++) {\n            if (a.charAt(i) == b.charAt(i)) {\n                result.append(\"0\");\n            } else {\n                result.append(\"1\");\n            }\n        }\n        return result.toString();\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"  \";\n        \n        String result = \"  \";\n        \n    }\n\n}"}
{"id":"Java\/110","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 2, 3, 4)) => \"YES\"\n    exchange(Arrays.asList(1, 2, 3, 4), Arrays.asList(1, 5, 3, 4)) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n     *\/\n    public String exchange(List<Integer> lst1, List<Integer> lst2) {\n","reference":"        int odd = 0, even = 0;\n        for (int i : lst1) {\n            if (i % 2 == 1) {\n                odd += 1;\n            }\n        }\n        for (int i : lst2) {\n            if (i % 2 == 0) {\n                even += 1;\n            }\n        }\n        if (even >= odd) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n}","prediction":"        \/\/        final List<String>\n    }\n\n}"}
{"id":"Java\/111","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram(\"a b c\") == {\"a\": 1, \"b\": 1, \"c\": 1}\n    histogram(\"a b b a\") == {\"a\": 2, \"b\": 2}\n    histogram(\"a b c a b\") == {\"a\": 2, \"b\": 2}\n    histogram(\"b b b b a\") == {\"b\": 4}\n    histogram(\"\") == {}\n     *\/\n    public Map<String, Integer> histogram(String test) {\n","reference":"        Map<String, Integer> dict1 = new HashMap<>();\n        List<String> list1 = Arrays.asList(test.split(\" \" ));\n        int t = 0;\n        for (String i : list1) {\n            if (Collections.frequency(list1, i) > t && !i.isEmpty()) {\n                t = Collections.frequency(list1, i);\n            }\n        }\n        if (t > 0) {\n            for (String i : list1) {\n                if (Collections.frequency(list1, i) == t) {\n                    dict1.put(i, t);\n                }\n            }\n        }\n        return dict1;\n    }\n}","prediction":"        \/\/        \/\/        \/\/\n        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/112","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and true\/false for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be (\"bcd\",false)\n    For s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",false)\n    For s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",true)\n     *\/\n    public List<Object> reverseDelete(String s, String c) {\n","reference":"        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            if (c.indexOf(ch) == -1) {\n                sb.append(ch);\n            }\n        }\n        return Arrays.asList(sb.toString(), sb.toString().equals(sb.reverse().toString()));\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \n\n\n\n    }\n\n}"}
{"id":"Java\/113","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i\"th string of the input.\n\n    >>> oddCount(Arrays.asList(\"1234567\"))\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> oddCount(Arrays.asList(\"3\",\"11111111\"))\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n     *\/\n    public List<String> oddCount(List<String> lst) {\n","reference":"        List<String> res = new ArrayList<>();\n        for (String arr : lst) {\n            int n = 0;\n            for (char d : arr.toCharArray()) {\n                if ((d - '0') % 2 == 1) {\n                    n += 1;\n                }\n            }\n            res.add(\"the number of odd elements \" + n + \"n the str\" + n + \"ng \" + n + \" of the \" + n + \"nput.\" );\n        }\n        return res;\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \n        \/\/        \n        \/\/        \n        \/\/        \n        \/\/        \n        \/\/        \n        \/\/        \n        \n\n\n    }\n\n}"}
{"id":"Java\/12","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest(List.of())\n    Optional.empty\n    >>> longest(Arrays.asList(\"a\", \"b\", \"c\"))\n    Optional[a]\n    >>> longest(Arrays.asList(\"a\", \"bb\", \"ccc\"))\n    Optional[ccc]\n     *\/\n    public Optional<String> longest(List<String> strings) {\n","reference":"        if (strings.isEmpty()) {\n            return Optional.empty();\n        }\n        String longest = strings.get(0);\n        for (String s : strings) {\n            if (s.length() > longest.length()) {\n                longest = s;\n            }\n        }\n        return Optional.of(longest);\n    }\n}","prediction":"        final List<String> result = new ArrayList<String>();\n    }\n\n}"}
{"id":"Java\/123","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the\n    previous term as follows: if the previous term is even, the next term is one half of\n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note:\n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n     *\/\n    public List<Integer> getOddCollatz(int n) {\n","reference":"        List<Integer> odd_collatz = new ArrayList<>();\n        if (n % 2 == 1) {\n            odd_collatz.add(n);\n        }\n        while (n > 1) {\n            if (n % 2 == 0) {\n                n = n \/ 2;\n            } else {\n                n = n * 3 + 1;\n            }\n            if (n % 2 == 1) {\n                odd_collatz.add(n);\n            }\n        }\n        Collections.sort(odd_collatz);\n        return odd_collatz;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        \/\/        @class\n        \/\/        \/\/\n        \/\/        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \n\n\n\n    }\n\n}"}
{"id":"Java\/124","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You have to write a function which validates a given date string and\n    returns true if the date is valid otherwise false.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example:\n    validDate(\"03-11-2000\") => true\n    validDate(\"15-01-2012\") => false\n    validDate(\"04-0-2040\") => false\n    validDate(\"06-04-2020\") => true\n    validDate(\"06\/04\/2020\") => false\n     *\/\n    public boolean validDate(String date) {\n","reference":"        try {\n            date = date.strip();\n            String[] dates = date.split(\"-\" );\n            String m = dates[0];\n            while (!m.isEmpty() && m.charAt(0) == '0') {\n                m = m.substring(1);\n            }\n            String d = dates[1];\n            while (!d.isEmpty() && d.charAt(0) == '0') {\n                d = d.substring(1);\n            }\n            String y = dates[2];\n            while (!y.isEmpty() && y.charAt(0) == '0') {\n                y = y.substring(1);\n            }\n            int month = Integer.parseInt(m), day = Integer.parseInt(d), year = Integer.parseInt(y);\n            if (month < 1 || month > 12) {\n                return false;\n            }\n            if (Arrays.asList(1, 3, 5, 7, 8, 10, 12).contains(month) && (day < 1 || day > 31)) {\n                return false;\n            }\n            if (Arrays.asList(4, 6, 9, 11).contains(month) && (day < 1 || day > 30)) {\n                return false;\n            }\n            if (month == 2 && (day < 1 || day > 29)) {\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/        \/\/        \/\/        \/\/        \/\/\n        \/\/        \/\/        \/\/\n        \/\/        \/\/        \n        \/\/        \/\/\n        \/\/        \n        \/\/        \n        \n        \/\/        \n        \/\/        \n        \n    }\n\n}"}
{"id":"Java\/125","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n    Examples\n    splitWords(\"Hello world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"Hello,world!\") == [\"Hello\", \"world!\"]\n    splitWords(\"abcdef\") == 3\n     *\/\n    public Object splitWords(String txt) {\n","reference":"        if (txt.contains(\" \" )) {\n            return Arrays.asList(txt.split(\" \" ));\n        } else if (txt.contains(\",\" )) {\n            return Arrays.asList(txt.split(\"[,\\s]\" ));\n        } else {\n            int count = 0;\n            for (char c : txt.toCharArray()) {\n                if (Character.isLowerCase(c) && (c - 'a') % 2 == 1) {\n                    count += 1;\n                }\n            }\n            return count;\n        }\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/129","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k,\n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n     *\/\n    public List<Integer> minPath(List<List<Integer>> grid, int k) {\n","reference":"        int n = grid.size();\n        int val = n * n + 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid.get(i).get(j) == 1) {\n                    List<Integer> temp = new ArrayList<>();\n                    if (i != 0) {\n                        temp.add(grid.get(i - 1).get(j));\n                    }\n                    if (j != 0) {\n                        temp.add(grid.get(i).get(j - 1));\n                    }\n                    if (i != n - 1) {\n                        temp.add(grid.get(i + 1).get(j));\n                    }\n                    if (j != n - 1) {\n                        temp.add(grid.get(i).get(j + 1));\n                    }\n                    val = Collections.min(temp);\n                }\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n            if (i % 2 == 0) {\n                ans.add(1);\n            } else {\n                ans.add(val);\n            }\n        }\n        return ans;\n    }\n}","prediction":"        \/\/        \/\/        int i = 0;\n        \/\/        int i = 0;\n        \/\/\n    }\n\n}"}
{"id":"Java\/131","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n     *\/\n    public int digits(int n) {\n","reference":"        int product = 1, odd_count = 0;\n        for (char digit : String.valueOf(n).toCharArray()) {\n            int int_digit = digit - '0';\n            if (int_digit % 2 == 1) {\n                product *= int_digit;\n                odd_count += 1;\n            }\n        }\n        if (odd_count == 0) {\n            return 0;\n        } else {\n            return product;\n        }\n    }\n}","prediction":"    int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/132","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return true if and only if there is a valid subsequence of brackets\n    where at least one bracket in the subsequence is nested.\n\n    isNested(\"[[]]\") -> true\n    isNested(\"[]]]]]]][[[[[]\") -> false\n    isNested(\"[][]\") -> false\n    isNested(\"[]\") -> false\n    isNested(\"[[][]]\") -> true\n    isNested(\"[[]][[\") -> true\n     *\/\n    public boolean isNested(String string) {\n","reference":"        List<Integer> opening_bracket_index = new ArrayList<>(), closing_bracket_index = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i) == '[') {\n                opening_bracket_index.add(i);\n            } else {\n                closing_bracket_index.add(i);\n            }\n        }\n        Collections.reverse(closing_bracket_index);\n        int i = 0, l = closing_bracket_index.size();\n        for (int idx : opening_bracket_index) {\n            if (i < l && idx < closing_bracket_index.get(i)) {\n                i += 1;\n            }\n        }\n        return i >= 2;\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"  \";\n        \n        String result = \"  \";\n        \n        String result = \"  \";\n        \n        String result = \"  \";\n        \n        \n    }\n\n}"}
{"id":"Java\/137","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compareOne(1, 2.5) -> Optional.of(2.5)\n    compareOne(1, \"2,3\") -> Optional.of(\"2,3\")\n    compareOne(\"5,1\", \"6\") -> Optional.of(\"6\")\n    compareOne(\"1\", 1) -> Optional.empty()\n     *\/\n    public Optional<Object> compareOne(Object a, Object b) {\n","reference":"        double temp_a = 0, temp_b = 0;\n        if (a instanceof Integer) {\n            temp_a = (Integer) a * 1.0;\n        } else if (a instanceof Double) {\n            temp_a = (double) a;\n        } else if (a instanceof String) {\n            temp_a = Double.parseDouble(((String) a).replace(',', '.'));\n        }\n        if (b instanceof Integer) {\n            temp_b = (Integer) b * 1.0;\n        } else if (b instanceof Double) {\n            temp_b = (double) b;\n        } else if (b instanceof String) {\n            temp_b = Double.parseDouble(((String) b).replace(',', '.'));\n        }\n        if (temp_a == temp_b) {\n            return Optional.empty();\n        } else if (temp_a > temp_b) {\n            return Optional.of(a);\n        } else {\n            return Optional.of(b);\n        }\n    }\n}","prediction":"        \/\/        \/\/        \/\/\n        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/139","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> specialFactorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n     *\/\n    public long specialFactorial(int n) {\n","reference":"        long fact_i = 1, special_fact = 1;\n        for (int i = 1; i <= n; i++) {\n            fact_i *= i;\n            special_fact *= fact_i;\n        }\n        return special_fact;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/140","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with -\n\n    fixSpaces(\"Example\") == \"Example\"\n    fixSpaces(\"Example 1\") == \"Example_1\"\n    fixSpaces(\" Example 2\") == \"_Example_2\"\n    fixSpaces(\" Example   3\") == \"_Example-3\"\n     *\/\n    public String fixSpaces(String text) {\n","reference":"        StringBuilder sb = new StringBuilder();\n        int start = 0, end = 0;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) == ' ') {\n                end += 1;\n            } else {\n                if (end - start > 2) {\n                    sb.append('-');\n                } else if (end - start > 0) {\n                    sb.append(\"_\".repeat(end - start));\n                }\n                sb.append(text.charAt(i));\n                start = i + 1;\n                end = i + 1;\n            }\n        }\n        if (end - start > 2) {\n            sb.append('-');\n        } else if (end - start > 0) {\n            sb.append(\"_\".repeat(end - start));\n        }\n        return sb.toString();\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n    }\n\n}"}
{"id":"Java\/143","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n     *\/\n    public String wordsInSentence(String sentence) {\n","reference":"        List<String> new_lst = new ArrayList<>();\n        for (String word : sentence.split(\" \" )) {\n            boolean flg = true;\n            if (word.length() == 1) {\n                continue;\n            }\n            for (int i = 2; i < word.length(); i++) {\n                if (word.length() % i == 0) {\n                    flg = false;\n                    break;\n                }\n            }\n            if (flg) {\n                new_lst.add(word);\n            }\n        }\n        return String.join(\" \", new_lst);\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n    }\n\n}"}
{"id":"Java\/144","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Your task is to implement a function that will simplify the expression\n    x * n. The function returns true if x * n evaluates to a whole number and false\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>\/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1\/5\", \"5\/1\") = true\n    simplify(\"1\/6\", \"2\/1\") = false\n    simplify(\"7\/10\", \"10\/2\") = false\n     *\/\n    public boolean simplify(String x, String n) {\n","reference":"        String[] a = x.split(\"\/\");\n        String[] b = n.split(\"\/\");\n        int numerator = Integer.parseInt(a[0]) * Integer.parseInt(b[0]);\n        int denom = Integer.parseInt(a[1]) * Integer.parseInt(b[1]);\n        return numerator \/ denom * denom == numerator;\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/        \/\/        \/\/        @class\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/\n        \/\/        \/\/\n        \/\/\n        \/\/        \/\/\n        \/\/        \n    }\n\n}"}
{"id":"Java\/148","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> [\"Saturn\", \"Uranus\"]\n    bf(\"Earth\", \"Mercury\") ==> [\"Venus\"]\n    bf(\"Mercury\", \"Uranus\") ==> [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n     *\/\n    public List<String> bf(String planet1, String planet2) {\n","reference":"        List<String> planet_names = Arrays.asList(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n        if (!planet_names.contains(planet1) || !planet_names.contains(planet2) || planet1.equals(planet2)) {\n            return List.of();\n        }\n        int planet1_index = planet_names.indexOf(planet1);\n        int planet2_index = planet_names.indexOf(planet2);\n        if (planet1_index < planet2_index) {\n            return planet_names.subList(planet1_index + 1, planet2_index);\n        } else {\n            return planet_names.subList(planet2_index + 1, planet1_index);\n        }\n    }\n}","prediction":"        \/\/\n        \/\/        \/\/        \/\/        \n        \/\/        \/\/        \n        \/\/        \/\/        \n        \/\/        \/\/\n        \/\/        \n        \n        \n        String s = \"1\";\n        \n        \n        String s = \"1\";\n        \n        \n        String s = \"1\";\n        \n        \n        String s = \"1\";\n        \n        \n    }\n\n}"}
{"id":"Java\/150","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    A simple program which should return the value of x if n is\n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for xOrY(7, 34, 12) == 34\n    for xOrY(15, 8, 5) == 5\n     *\/\n    public int xOrY(int n, int x, int y) {\n","reference":"        if (n == 1) {\n            return y;\n        }\n        for (int i = 2; i < n; i++) {\n            if (n % i == 0) {\n                return y;\n            }\n        }\n        return x;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/152","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match.\n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n    example:\n\n    compare(Arrays.asList(1,2,3,4,5,1),Arrays.asList(1,2,3,4,2,-2)) -> [0,0,0,0,3,3]\n    compare(Arrays.asList(0,5,0,0,0,4),Arrays.asList(4,1,1,0,0,-2)) -> [4,4,1,0,0,6]\n     *\/\n    public List<Integer> compare(List<Integer> game, List<Integer> guess) {\n","reference":"        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n        }\n        return result;\n    }\n}","prediction":"        \/\/\n        \/\/        \/\/        \/\/        \/\/        \/\/        \/\/        @class\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        \n        int i = 0;\n        int i = 0;\n\n    }\n\n}"}
{"id":"Java\/153","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters\n    in the extension's name, the strength is given by the fraction CAP - SM.\n    You should find the strongest extension and return a string in this\n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"] then you should\n    return \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension\n    (its strength is -1).\n    Example:\n    for StrongestExtension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n     *\/\n    public String StrongestExtension(String class_name, List<String> extensions) {\n","reference":"        String strong = extensions.get(0);\n        int my_val = (int) (strong.chars().filter(Character::isUpperCase).count() - strong.chars().filter(Character::isLowerCase).count());\n        for (String s : extensions) {\n            int val = (int) (s.chars().filter(Character::isUpperCase).count() - s.chars().filter(Character::isLowerCase).count());\n            if (val > my_val) {\n                strong = s;\n                my_val = val;\n            }\n        }\n        return class_name + \".\" + strong;\n    }\n}","prediction":"        \/\/        \/\/\n        \/\/        \/\/        \/\/\n        \/\/        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \n    }\n\n}"}
{"id":"Java\/154","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    cycpatternCheck(\"abcd\",\"abd\") => false\n    cycpatternCheck(\"hello\",\"ell\") => true\n    cycpatternCheck(\"whassup\",\"psus\") => false\n    cycpatternCheck(\"abab\",\"baa\") => true\n    cycpatternCheck(\"efef\",\"eeff\") => false\n    cycpatternCheck(\"himenss\",\"simen\") => true\n     *\/\n    public boolean cycpatternCheck(String a, String b) {\n","reference":"        int l = b.length();\n        String pat = b + b;\n        for (int i = 0; i <= a.length() - l; i++) {\n            for (int j = 0; j <= l; j++) {\n                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}","prediction":"        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/\n        \/\/        \n        \/\/        \n        \n        \/\/\n        \/\/\n        \/\/\n        \n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \n        \n        \n    }\n\n}"}
{"id":"Java\/156","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> intToMiniRoman(19) == \"xix\"\n    >>> intToMiniRoman(152) == \"clii\"\n    >>> intToMiniRoman(426) == \"cdxxvi\"\n     *\/\n    public String intToMiniRoman(int number) {\n","reference":"        List<Integer> num = Arrays.asList(1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000);\n        List<String> sym = Arrays.asList(\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\", \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\");\n        int i = 12;\n        String res = \"\";\n        while (number > 0) {\n            int div = number \/ num.get(i);\n            number %= num.get(i);\n            while (div != 0) {\n                res += sym.get(i);\n                div -= 1;\n            }\n            i -= 1;\n        }\n        return res.toLowerCase();\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n\n    }\n\n}"}
{"id":"Java\/157","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given the lengths of the three sides of a triangle. Return true if the three\n    sides form a right-angled triangle, false otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or\n    90 degree.\n    Example:\n    rightAngleTriangle(3, 4, 5) == true\n    rightAngleTriangle(1, 2, 3) == false\n     *\/\n    public boolean rightAngleTriangle(int a, int b, int c) {\n","reference":"        return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/158","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    findMax([\"name\", \"of\", \"string\"]) == \"string\"\n    findMax([\"name\", \"enam\", \"game\"]) == \"enam\"\n    findMax([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n     *\/\n    public String findMax(List<String> words) {\n","reference":"        List<String> words_sort = new ArrayList<>(words);\n        words_sort.sort(new Comparator<String>() {\n            @Override\n            public int compare(String o1, String o2) {\n                Set<Character> s1 = new HashSet<>();\n                for (char ch : o1.toCharArray()) {\n                    s1.add(ch);\n                }\n                Set<Character> s2 = new HashSet<>();\n                for (char ch : o2.toCharArray()) {\n                    s2.add(ch);\n                }\n                if (s1.size() > s2.size()) {\n                    return 1;\n                } else if (s1.size() < s2.size()) {\n                    return -1;\n                } else {\n                    return -o1.compareTo(o2);\n                }\n            }\n        });\n        return words_sort.get(words_sort.size() - 1);\n    }\n}","prediction":"        List<String> result = new ArrayList<String>();\n    }\n\n}"}
{"id":"Java\/161","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa,\n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n     *\/\n    public String solve(String s) {\n","reference":"        boolean flag = true;\n        StringBuilder new_string = new StringBuilder();\n        for (char i : s.toCharArray()) {\n            if (Character.isUpperCase(i)) {\n                new_string.append(Character.toLowerCase(i));\n                flag = false;\n            } else if (Character.isLowerCase(i)) {\n                new_string.append(Character.toUpperCase(i));\n                flag = false;\n            } else {\n                new_string.append(i);\n            }\n        }\n        if (flag) {\n            new_string.reverse();\n        }\n        return new_string.toString();\n    }\n}","prediction":"\n    }\n\n}"}
{"id":"Java\/17","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    \"o\" - whole note, lasts four beats\n    \"o|\" - half note, lasts two beats\n    \".|\" - quater note, lasts one beat\n\n    >>> parseMusic(\"o o|.| o| o|.|.|.|.| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n     *\/\n    public List<Integer> parseMusic(String string) {\n","reference":"        String[] notes = string.split(\" \");\n        List<Integer> result = new ArrayList<>();\n        for (String s : notes) {\n            switch (s) {\n                case \"o\" -> result.add(4);\n                case \"o|\" -> result.add(2);\n                case \".|\" -> result.add(1);\n            }\n        }\n        return result;\n    }\n}","prediction":"class dummyTest {\n        @Test\n        public void dummy() {\n\n    }\n\n}"}
{"id":"Java\/18","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> howManyTimes(\"\", \"a\")\n    0\n    >>> howManyTimes(\"aaa\", \"a\")\n    3\n    >>> howManyTimes(\"aaaa\", \"aa\")\n    3\n     *\/\n    public int howManyTimes(String string, String substring) {\n","reference":"        int times = 0;\n\n        for (int i = 0; i < string.length() - substring.length() + 1; i++) {\n            if (string.substring(i, i + substring.length()).equals(substring)) {\n                times += 1;\n            }\n        }\n\n        return times;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/22","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Filter given list of any values only for integers\n    >>> filter_integers(Arrays.asList('a', 3.14, 5))\n    [5]\n    >>> filter_integers(Arrays.asList(1, 2, 3, \"abc\", Map.of(), List.of()))\n    [1, 2, 3]\n     *\/\n    public List<Integer> filterIntergers(List<Object> values) {\n","reference":"        List<Integer> result = new ArrayList<>();\n        for (Object x : values) {\n            if (x instanceof Integer) {\n                result.add((Integer) x);\n            }\n        }\n        return result;\n    }\n}","prediction":"        final List<String> result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n        int[] result = new ArrayList<String>();\n\n    }\n\n}"}
{"id":"Java\/23","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return length of given string\n    >>> strlen(\"\")\n    0\n    >>> strlen(\"abc\")\n    3\n     *\/\n    public int strlen(String string) {\n","reference":"        return string.length();\n    }\n}","prediction":"    int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/28","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Concatenate list of strings into a single string\n    >>> concatenate(List.of())\n    \"\"\n    >>> concatenate(Arrays.asList(\"a\", \"b\", \"c\"))\n    \"abc\"\n     *\/\n    public String concatenate(List<String> strings) {\n","reference":"        return String.join(\"\", strings);\n    }\n}","prediction":"        final List<String> result = new ArrayList<String>();\n        assertEquals(1, result.size());\n    }\n\n}"}
{"id":"Java\/31","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return true if a given number is prime, and false otherwise.\n    >>> isPrime(6)\n    false\n    >>> isPrime(101)\n    true\n    >>> isPrime(11)\n    true\n    >>> isPrime(13441)\n    true\n    >>> isPrime(61)\n    true\n    >>> isPrime(4)\n    false\n    >>> isPrime(1)\n    false\n     *\/\n    public boolean isPrime(int n) {\n","reference":"        if (n < 2) {\n            return false;\n        }\n        for (int k = 2; k < n; k++) {\n            if (n % k == 0) {\n                return false;\n            }\n        }\n         return true;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n\n    }\n\n}"}
{"id":"Java\/36","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizzBuzz(50)\n    0\n    >>> fizzBuzz(78)\n    2\n    >>> fizzBuzz(79)\n    3\n     *\/\n    public int fizzBuzz(int n) {\n","reference":"        int result = 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                char[] digits = String.valueOf(i).toCharArray();\n                for (char c : digits) {\n                    if (c == '7') {\n                        result += 1;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/38","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    returns encoded string by cycling groups of three characters.\n     *\/\n    public String encodeCyclic(String s) {\n        \/\/ split string to groups. Each of length 3.\n        List<String> groups = new ArrayList<>();\n        for (int i = 0; i < s.length(); i += 3) {\n            groups.add(s.substring(i, Math.min(i + 3, s.length())));\n        }\n        \/\/ cycle elements in each group. Unless group has fewer elements than 3.\n        for (int i = 0; i < groups.size(); i++) {\n            if (groups.get(i).length() == 3) {\n                groups.set(i, groups.get(i).substring(1) + groups.get(i).charAt(0));\n            }\n        }\n        return String.join(\"\", groups);\n    }\n\n    \/**\n    takes as input string encoded with encodeCyclic function. Returns decoded string.\n     *\/\n    public String decodeCyclic(String s) {\n","reference":"        return encodeCyclic(encodeCyclic(s));\n    }\n}","prediction":"            String result = \"abc\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"  \";\n        String result = \"Hello World\";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String result = \"Hello World\";\n        String expected = \"  \";\n        String result = \"Hello World\";\n        String expected = \"  \";\n        String result = \"Hello World\";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n    }\n\n}"}
{"id":"Java\/39","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    primeFib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> primeFib(1)\n    2\n    >>> primeFib(2)\n    3\n    >>> primeFib(3)\n    5\n    >>> primeFib(4)\n    13\n    >>> primeFib(5)\n    89\n     *\/\n    public int primeFib(int n) {\n","reference":"        int f0 = 0, f1 = 1;\n        while (true) {\n            int p = f0 + f1;\n            boolean is_prime = p >= 2;\n            for (int k = 2; k < Math.min(Math.sqrt(p) + 1, p - 1); k++) {\n                if (p % k == 0) {\n                    is_prime = false;\n                    break;\n                }\n            }\n            if (is_prime) {\n                n -= 1;\n            }\n            if (n == 0) {\n                return p;\n            }\n            f0 = f1;\n            f1 = p;\n        }\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/41","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n     *\/\n    public int carRaceCollision(int n) {\n","reference":"        return n * n;\n    }\n}","prediction":"        \/\/        int i = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n        int[] expected = new ArrayList<String>();\n    }\n\n}"}
{"id":"Java\/44","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> changeBase(8, 3)\n    \"22\"\n    >>> changeBase(8, 2)\n    \"1000\"\n    >>> changeBase(7, 2)\n    \"111\"\n     *\/\n    public String changeBase(int x, int base) {\n","reference":"        StringBuilder ret = new StringBuilder();\n        while (x > 0) {\n            ret.append(String.valueOf(x % base));\n            x \/= base;\n        }\n        return ret.reverse().toString();\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/47","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return median of elements in the list l.\n    >>> median(Arrays.asList(3, 1, 2, 4, 5))\n    3\n    >>> median(Arrays.asList(-10, 4, 6, 1000, 10, 20))\n    15.0\n     *\/\n    public double median(List<Integer> l) {\n","reference":"        List<Integer> list = l;\n        Collections.sort(list);\n        if (l.size() % 2 == 1) {\n            return l.get(l.size() \/ 2);\n        } else {\n            return (l.get(l.size() \/ 2 - 1) + l.get(l.size() \/ 2)) \/ 2.0;\n        }\n    }\n}","prediction":"class dummyTest {\n        @Test\n        public void dummy() {\n\n    }\n\n}"}
{"id":"Java\/48","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Checks if given string is a palindrome\n    >>> isPalindrome(\"\")\n    true\n    >>> isPalindrome(\"aba\")\n    true\n    >>> isPalindrome(\"aaaaa\")\n    true\n    >>> isPalindrome(\"zbcd\")\n    false\n     *\/\n    public boolean isPalindrome(String text) {\n","reference":"        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i) != text.charAt(text.length() - 1 - i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","prediction":"        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String expected = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        \n    }\n\n}"}
{"id":"Java\/49","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n     *\/\n    public int modp(int n, int p) {\n","reference":"        int ret = 1;\n        for (int i = 0; i < n; i++) {\n            ret = (ret * 2) % p;\n        }\n        return ret;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/50","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    returns encoded string by shifting every character by 5 in the alphabet.\n     *\/\n    public String encodeShift(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 5 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n\n    \/**\n    takes as input string encoded with encodeShift function. Returns decoded string.\n     *\/\n    public String decodeShift(String s) {\n","reference":"        StringBuilder sb = new StringBuilder();\n        for (char ch : s.toCharArray()) {\n            sb.append((char) ('a' + ((ch + 21 - 'a') % 26)));\n        }\n        return sb.toString();\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        \n        String result = \"Hello World\";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        \n        String result = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n        String expected = \"  \";\n    }\n\n}"}
{"id":"Java\/51","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    removeVowels is a function that takes string and returns string without vowels.\n    >>> removeVowels(\"\")\n    \"\"\n    >>> removeVowels(\"abcdef\\nghijklm\")\n    \"bcdf\\nghjklm\"\n    >>> removeVowels(\"abcdef\")\n    \"bcdf\"\n    >>> removeVowels(\"aaaaa\")\n    \"\"\n    >>> removeVowels(\"aaBAA\")\n    \"B\"\n    >>> removeVowels(\"zbcd\")\n    \"zbcd\"\n     *\/\n    public String removeVowels(String text) {\n","reference":"        StringBuilder sb = new StringBuilder();\n        for (char ch : text.toCharArray()) {\n            if (\"aeiou\".indexOf(Character.toLowerCase(ch)) == -1) {\n                sb.append(ch);\n            }\n        }\n        return sb.toString();\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        \n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String result = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n        String expected = \"Hello World\";\n    }\n\n}"}
{"id":"Java\/53","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n     *\/\n    public int add(int x, int y) {\n","reference":"        return x + y;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/55","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n     *\/\n    public int fib(int n) {\n","reference":"        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return fib(n - 1) + fib(n - 2);\n    }\n}","prediction":"\n    }\n\n}"}
{"id":"Java\/56","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correctBracketing(\"<\")\n    false\n    >>> correctBracketing(\"<>\")\n    true\n    >>> correctBracketing(\"<<><>>\")\n    true\n    >>> correctBracketing(\"><<>\")\n    false\n     *\/\n    public boolean correctBracketing(String brackets) {\n","reference":"        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '<') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n    }\n\n}"}
{"id":"Java\/59","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largestPrimeFactor(13195)\n    29\n    >>> largestPrimeFactor(2048)\n    2\n     *\/\n    public int largestPrimeFactor(int n) {\n","reference":"        int largest = 1;\n        for (int j = 2; j <= n; j++) {\n            if (n % j == 0) {\n                boolean is_prime = j >= 2;\n                for (int i = 2; i < j - 1; i++) {\n                    if (j % i == 0) {\n                        is_prime = false;\n                        break;\n                    }\n                }\n                if (is_prime) {\n                    largest = Math.max(largest, j);\n                }\n            }\n        }\n        return largest;\n    }\n}","prediction":"class dummyTest {\n        @Test\n        public void dummy() {\n\n    }\n\n}"}
{"id":"Java\/6","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parseNestedParens(\"(()()) ((())) () ((())()())\")\n    [2, 3, 1, 3]\n     *\/\n    public List<Integer> parseNestedParens(String paren_string) {\n","reference":"        String[] groups = paren_string.split(\" \");\n        List<Integer> result = new ArrayList<>(List.of());\n        for (String group : groups) {\n            if (group.length() > 0) {\n                int depth = 0;\n                int max_depth = 0;\n                for (char c : group.toCharArray()) {\n                    if (c == '(') {\n                        depth += 1;\n                        max_depth = Math.max(depth, max_depth);\n                    } else {\n                        depth -= 1;\n                    }\n                }\n                result.add(max_depth);\n            }\n        }\n        return result;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        @Override\n\n    }\n\n}"}
{"id":"Java\/60","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    sumToN is a function that sums numbers from 1 to n.\n    >>> sumToN(30)\n    465\n    >>> sumToN(100)\n    5050\n    >>> sumToN(5)\n    15\n    >>> sumToN(10)\n    55\n    >>> sumToN(1)\n    1\n     *\/\n    public int sumToN(int n) {\n","reference":"        int result = 0;\n        for (int i = 1; i <= n; i++) {\n            result += i;\n        }\n        return result;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/61","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correctBracketing(\"(\")\n    false\n    >>> correctBracketing(\"()\")\n    true\n    >>> correctBracketing(\"(()())\")\n    true\n    >>> correctBracketing(\")(()\")\n    false\n     *\/\n    public boolean correctBracketing(String brackets) {\n","reference":"        int depth = 0;\n        for (char b : brackets.toCharArray()) {\n            if (b == '(') {\n                depth += 1;\n            } else {\n                depth -= 1;\n            }\n            if (depth < 0) {\n                return false;\n            }\n        }\n        return depth == 0;\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        \n        String result = \"  \";\n        \n        String result = \"  \";\n        \n    }\n\n}"}
{"id":"Java\/66","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n     *\/\n    public int digitSum(String s) {\n","reference":"        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                sum += c;\n            }\n        }\n        return sum;\n    }\n}","prediction":"class dummyTest {\n        @Test\n        public void dummy() {\n\n    }\n\n}"}
{"id":"Java\/67","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    In this task, you will be given a string that represents a number of apples and oranges\n    that are distributed in a basket of fruit this basket contains\n    apples, oranges, and mango fruits. Given the string that represents the total number of\n    the oranges and apples and an integer that represent the total number of the fruits\n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n     *\/\n    public int fruitDistribution(String s, int n) {\n","reference":"        List<Integer> lis = new ArrayList<>();\n        for (String i : s.split(\" \")) {\n            try {\n                lis.add(Integer.parseInt(i));\n            } catch (NumberFormatException ignored) {\n\n            }\n        }\n        return n - lis.stream().mapToInt(Integer::intValue).sum();\n    }\n}","prediction":"        \/\/        \/\/        \/\/        \/\/        \/\/\n        \/\/        \/\/        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/71","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater\n    than the third side.\n    Example:\n    triangleArea(3, 4, 5) == 6.00\n    triangleArea(1, 2, 10) == -1\n     *\/\n    public double triangleArea(double a, double b, double c) {\n","reference":"        if (a + b <= c || a + c <= b || b + c <= a) {\n            return -1;\n        }\n        double s = (a + b + c) \/ 2;\n        double area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n        area = (double) Math.round(area * 100) \/ 100;\n        return area;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/74","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    totalMatch(Arrays.asList(), Arrays.asList()) -> []\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"Hi\")) -> [\"hI\", \"Hi\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hi\", \"hi\", \"admin\", \"project\")) -> [\"hi\", \"admin\"]\n    totalMatch(Arrays.asList(\"hi\", \"admin\"), Arrays.asList(\"hI\", \"hi\", \"hi\")) -> [\"hI\", \"hi\", \"hi\"]\n    totalMatch(Arrays.asList(\"4\"), Arrays.asList(\"1\", \"2\", \"3\", \"4\", \"5\")) -> [\"4\"]\n     *\/\n    public List<String> totalMatch(List<String> lst1, List<String> lst2) {\n","reference":"        int l1 = 0;\n        for (String st : lst1) {\n            l1 += st.length();\n        }\n\n        int l2 = 0;\n        for (String st : lst2) {\n            l2 += st.length();\n        }\n\n        if (l1 <= l2) {\n            return lst1;\n        } else {\n            return lst2;\n        }\n    }\n}","prediction":"        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \/\/\n        \n    }\n\n}"}
{"id":"Java\/75","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    isMultiplyPrime(30) == true\n    30 = 2 * 3 * 5\n     *\/\n    public boolean isMultiplyPrime(int a) {\n","reference":"        class IsPrime {\n            public static boolean is_prime(int n) {\n                for (int j = 2; j < n; j++) {\n                    if (n % j == 0) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        }\n        for (int i = 2; i < 101; i++) {\n            if (!IsPrime.is_prime(i)) {\n                continue;\n            }\n            for (int j = i; j < 101; j++) {\n                if (!IsPrime.is_prime(j)) {\n                    continue;\n                }\n                for (int k = j; k < 101; k++) {\n                    if (!IsPrime.is_prime(k)) {\n                        continue;\n                    }\n                    if (i * j * k == a) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/76","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    isSimplePower(1, 4) => true\n    isSimplePower(2, 2) => true\n    isSimplePower(8, 2) => true\n    isSimplePower(3, 2) => false\n    isSimplePower(3, 1) => false\n    isSimplePower(5, 3) => false\n     *\/\n    public boolean isSimplePower(int x, int n) {\n","reference":"        if (n == 1) {\n            return x == 1;\n        }\n        int power = 1;\n        while (power < x) {\n            power = power * n;\n        }\n        return power == x;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/77","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that takes an integer a and returns true\n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> true\n    iscube(2) ==> false\n    iscube(-1) ==> true\n    iscube(64) ==> true\n    iscube(0) ==> true\n    iscube(180) ==> false\n     *\/\n    public boolean iscube(int a) {\n","reference":"        a = Math.abs(a);\n        return Math.round(Math.pow(Math.round(Math.pow(a, 1. \/ 3)), 3)) == a;\n    }\n}","prediction":"class dummyTest {\n        @Test\n        public void dummy() {\n\n    }\n\n}"}
{"id":"Java\/80","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    isHappy(a) => false\n    isHappy(aa) => false\n    isHappy(abcd) => true\n    isHappy(aabb) => false\n    isHappy(adb) => true\n    isHappy(xyy) => false\n     *\/\n    public boolean isHappy(String s) {\n","reference":"        if (s.length() < 3) {\n            return false;\n        }\n\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == s.charAt(i + 1) || s.charAt(i + 1) == s.charAt(i + 2) || s.charAt(i) == s.charAt(i + 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n    }\n\n}"}
{"id":"Java\/82","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that takes a string and returns true if the string\n    length is a prime number or false otherwise\n    Examples\n    primeLength(\"Hello\") == true\n    primeLength(\"abcdcba\") == true\n    primeLength(\"kittens\") == true\n    primeLength(\"orange\") == false\n     *\/\n    public boolean primeLength(String string) {\n","reference":"        int l = string.length();\n        if (l == 0 || l == 1) {\n            return false;\n        }\n        for (int i = 2; i < l; i++) {\n            if (l % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}","prediction":"    String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n    }\n\n}"}
{"id":"Java\/83","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n     *\/\n    public int startsOneEnds(int n) {\n","reference":"        if (n == 1) {\n            return 1;\n        }\n        return 18 * (int) Math.pow(10, n - 2);\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/84","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\n    Variables:\n        @N integer\n             Constraints: 0 <= N <= 10000.\n    Output:\n         a string of binary number\n     *\/\n    public String solve(int N) {\n","reference":"        int sum = 0;\n        for (char c : String.valueOf(N).toCharArray()) {\n            sum += (c - '0');\n        }\n        return Integer.toBinaryString(sum);\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
{"id":"Java\/89","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated.\n    The alphabet should be rotated in a manner such that the letters\n    shift down by two multiplied to two places.\n    For example:\n    encrypt(\"hi\") returns \"lm\"\n    encrypt(\"asdfghjkl\") returns \"ewhjklnop\"\n    encrypt(\"gf\") returns \"kj\"\n    encrypt(\"et\") returns \"ix\"\n     *\/\n    public String encrypt(String s) {\n","reference":"        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n                sb.append((char) ('a' + (c - 'a' + 2 * 2) % 26));\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}","prediction":"\n    }\n\n}"}
{"id":"Java\/91","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\n    For example:\n    >>> isBored(\"Hello world\")\n    0\n    >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n     *\/\n    public int isBored(String S) {\n","reference":"        String [] sentences = S.split(\"[.?!]\\s*\");\n        int count = 0;\n        for (String sentence : sentences) {\n            if (sentence.subSequence(0, 2).equals(\"I \")) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        \/\/        @class\n        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/92","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples\n    anyInt(5, 2, 7) -> true\n\n    anyInt(3, 2, 2) -> false\n\n    anyInt(3, -2, 1) -> true\n\n    anyInt(3.6, -2.2, 2) -> false\n     *\/\n    public boolean anyInt(Object x, Object y, Object z) {\n","reference":"        if (x instanceof Integer && y instanceof Integer && z instanceof Integer) {\n            return (int) x + (int) y == (int) z || (int) x + (int) z == (int) y || (int) y + (int) z == (int) x;\n        }\n        return false;\n    }\n}","prediction":"        \/\/        \/\/        \/\/        @Override\n    }\n\n}"}
{"id":"Java\/93","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Write a function that takes a message, and encodes in such a\n    way that it swaps case of all letters, replaces all vowels in\n    the message with the letter that appears 2 places ahead of that\n    vowel in the english alphabet.\n    Assume only letters.\n\n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n     *\/\n    public String encode(String message) {\n","reference":"        String vowels = \"aeiouAEIOU\";\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            char ch = c;\n            if (Character.isUpperCase(ch)) {\n                ch = Character.toLowerCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('a' + ((ch - 'a' + 28) % 26));\n                }\n            } else if (Character.isLowerCase(ch)) {\n                ch = Character.toUpperCase(ch);\n                if (vowels.indexOf(ch) != -1) {\n                    ch = (char) ('A' + ((ch - 'A' + 28) % 26));\n                }\n            }\n            sb.append(ch);\n        }\n        return sb.toString();\n    }\n}","prediction":"        String result = \"Hello World\";\n        String result = \"Hello World\";\n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello World\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello world\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n        String result = \"Hello\";\n        \n    }\n\n}"}
{"id":"Java\/95","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a map, return True if all keys are strings in lower\n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given map is empty.\n    Examples:\n    checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n     *\/\n    public boolean checkDictCase(Map<Object, Object> dict) {\n","reference":"        if (dict.isEmpty()) {\n            return false;\n        }\n        String state = \"start\";\n        for (Map.Entry entry : dict.entrySet()) {\n            if (!(entry.getKey() instanceof String key)) {\n                state = \"mixed\";\n                break;\n            }\n            boolean is_upper = true, is_lower = true;\n            for (char c : key.toCharArray()) {\n                if (Character.isLowerCase(c)) {\n                    is_upper = false;\n                } else if (Character.isUpperCase(c)) {\n                    is_lower = false;\n                } else {\n                    is_upper = false;\n                    is_lower = false;\n                }\n            }\n            if (state.equals(\"start\")) {\n                if (is_upper) {\n                    state = \"upper\";\n                } else if (is_lower) {\n                    state = \"lower\";\n                } else {\n                    break;\n                }\n            } else if ((state.equals(\"upper\") && !is_upper) || (state.equals(\"lower\") && !is_lower)) {\n                state = \"mixed\";\n                break;\n            }\n        }\n        return state.equals(\"upper\") || state.equals(\"lower\");\n    }\n}","prediction":"        \/\/        \/\/\n    }\n\n}"}
{"id":"Java\/98","prompt":"import java.util.*;\nimport java.lang.*;\n\nclass Solution {\n    \/**\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    countUpper(\"aBCdEf\") returns 1\n    countUpper(\"abcdefg\") returns 0\n    countUpper(\"dBBE\") returns 0\n     *\/    \n    public int countUpper(String s) {\n","reference":"        int count = 0;\n        for (int i = 0; i < s.length(); i += 2) {\n            if (\"AEIOU\".indexOf(s.charAt(i)) != -1) {\n                count += 1;\n            }\n        }\n        return count;\n    }\n}","prediction":"        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n        int i = 0;\n    }\n\n}"}
